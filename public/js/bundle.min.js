!function t(e,r,o){function n(s,a){if(!r[s]){if(!e[s]){var c="function"==typeof require&&require;if(!a&&c)return c(s,!0);if(i)return i(s,!0);var u=new Error("Cannot find module '"+s+"'");throw u.code="MODULE_NOT_FOUND",u}var l=r[s]={exports:{}};e[s][0].call(l.exports,function(t){var r=e[s][1][t];return n(r||t)},l,l.exports,t,e,r,o)}return r[s].exports}for(var i="function"==typeof require&&require,s=0;s<o.length;s++)n(o[s]);return n}({1:[function(t,e,r){"use strict";var o=t("object-keys"),n=t("foreach"),i="function"==typeof Symbol&&"symbol"==typeof Symbol(),s=Object.prototype.toString,a=Object.defineProperty&&function(){var t={};try{Object.defineProperty(t,"x",{enumerable:!1,value:t});for(var e in t)return!1;return t.x===t}catch(t){return!1}}(),c=function(t,e,r,o){var n;e in t&&("function"!=typeof(n=o)||"[object Function]"!==s.call(n)||!o())||(a?Object.defineProperty(t,e,{configurable:!0,enumerable:!1,value:r,writable:!0}):t[e]=r)},u=function(t,e){var r=arguments.length>2?arguments[2]:{},s=o(e);i&&(s=s.concat(Object.getOwnPropertySymbols(e))),n(s,function(o){c(t,o,e[o],r[o])})};u.supportsDescriptors=!!a,e.exports=u},{foreach:15,"object-keys":23}],2:[function(t,e,r){"use strict";var o=t("has"),n=t("es-to-primitive/es6"),i=Object.prototype.toString,s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator,a=t("./helpers/isNaN"),c=t("./helpers/isFinite"),u=Number.MAX_SAFE_INTEGER||Math.pow(2,53)-1,l=t("./helpers/assign"),p=t("./helpers/sign"),f=t("./helpers/mod"),y=t("./helpers/isPrimitive"),h=parseInt,b=t("function-bind"),v=b.call(Function.call,Array.prototype.slice),m=b.call(Function.call,String.prototype.slice),g=b.call(Function.call,RegExp.prototype.test,/^0b[01]+$/i),d=b.call(Function.call,RegExp.prototype.test,/^0o[0-7]+$/i),w=b.call(Function.call,RegExp.prototype.exec),T=["","​","￾"].join(""),j=new RegExp("["+T+"]","g"),S=b.call(Function.call,RegExp.prototype.test,j),O=b.call(Function.call,RegExp.prototype.test,/^[-+]0x[0-9a-f]+$/i),E=["\t\n\v\f\r   ᠎    ","         　\u2028","\u2029\ufeff"].join(""),x=new RegExp("(^["+E+"]+)|(["+E+"]+$)","g"),I=b.call(Function.call,String.prototype.replace),C=t("./es5"),P=t("is-regex"),N=l(l({},C),{Call:function(t,e){var r=arguments.length>2?arguments[2]:[];if(!this.IsCallable(t))throw new TypeError(t+" is not a function");return t.apply(e,r)},ToPrimitive:n,ToNumber:function(t){var e=y(t)?t:n(t,Number);if("symbol"==typeof e)throw new TypeError("Cannot convert a Symbol value to a number");if("string"==typeof e){if(g(e))return this.ToNumber(h(m(e,2),2));if(d(e))return this.ToNumber(h(m(e,2),8));if(S(e)||O(e))return NaN;var r=I(e,x,"");if(r!==e)return this.ToNumber(r)}return Number(e)},ToInt16:function(t){var e=this.ToUint16(t);return e>=32768?e-65536:e},ToInt8:function(t){var e=this.ToUint8(t);return e>=128?e-256:e},ToUint8:function(t){var e=this.ToNumber(t);if(a(e)||0===e||!c(e))return 0;var r=p(e)*Math.floor(Math.abs(e));return f(r,256)},ToUint8Clamp:function(t){var e=this.ToNumber(t);if(a(e)||e<=0)return 0;if(e>=255)return 255;var r=Math.floor(t);return r+.5<e?r+1:e<r+.5?r:r%2!=0?r+1:r},ToString:function(t){if("symbol"==typeof t)throw new TypeError("Cannot convert a Symbol value to a string");return String(t)},ToObject:function(t){return this.RequireObjectCoercible(t),Object(t)},ToPropertyKey:function(t){var e=this.ToPrimitive(t,String);return"symbol"==typeof e?e:this.ToString(e)},ToLength:function(t){var e=this.ToInteger(t);return e<=0?0:e>u?u:e},CanonicalNumericIndexString:function(t){if("[object String]"!==i.call(t))throw new TypeError("must be a string");if("-0"===t)return-0;var e=this.ToNumber(t);return this.SameValue(this.ToString(e),t)?e:void 0},RequireObjectCoercible:C.CheckObjectCoercible,IsArray:Array.isArray||function(t){return"[object Array]"===i.call(t)},IsConstructor:function(t){return"function"==typeof t&&!!t.prototype},IsExtensible:function(t){return!Object.preventExtensions||!y(t)&&Object.isExtensible(t)},IsInteger:function(t){if("number"!=typeof t||a(t)||!c(t))return!1;var e=Math.abs(t);return Math.floor(e)===e},IsPropertyKey:function(t){return"string"==typeof t||"symbol"==typeof t},IsRegExp:function(t){if(!t||"object"!=typeof t)return!1;if(s){var e=t[Symbol.match];if(void 0!==e)return C.ToBoolean(e)}return P(t)},SameValueZero:function(t,e){return t===e||a(t)&&a(e)},GetV:function(t,e){if(!this.IsPropertyKey(e))throw new TypeError("Assertion failed: IsPropertyKey(P) is not true");return this.ToObject(t)[e]},GetMethod:function(t,e){if(!this.IsPropertyKey(e))throw new TypeError("Assertion failed: IsPropertyKey(P) is not true");var r=this.GetV(t,e);if(null!=r){if(!this.IsCallable(r))throw new TypeError(e+"is not a function");return r}},Get:function(t,e){if("Object"!==this.Type(t))throw new TypeError("Assertion failed: Type(O) is not Object");if(!this.IsPropertyKey(e))throw new TypeError("Assertion failed: IsPropertyKey(P) is not true");return t[e]},Type:function(t){return"symbol"==typeof t?"Symbol":C.Type(t)},SpeciesConstructor:function(t,e){if("Object"!==this.Type(t))throw new TypeError("Assertion failed: Type(O) is not Object");var r=t.constructor;if(void 0===r)return e;if("Object"!==this.Type(r))throw new TypeError("O.constructor is not an Object");var o=s&&Symbol.species?r[Symbol.species]:void 0;if(null==o)return e;if(this.IsConstructor(o))return o;throw new TypeError("no constructor found")},CompletePropertyDescriptor:function(t){if(!this.IsPropertyDescriptor(t))throw new TypeError("Desc must be a Property Descriptor");return this.IsGenericDescriptor(t)||this.IsDataDescriptor(t)?(o(t,"[[Value]]")||(t["[[Value]]"]=void 0),o(t,"[[Writable]]")||(t["[[Writable]]"]=!1)):(o(t,"[[Get]]")||(t["[[Get]]"]=void 0),o(t,"[[Set]]")||(t["[[Set]]"]=void 0)),o(t,"[[Enumerable]]")||(t["[[Enumerable]]"]=!1),o(t,"[[Configurable]]")||(t["[[Configurable]]"]=!1),t},Set:function(t,e,r,o){if("Object"!==this.Type(t))throw new TypeError("O must be an Object");if(!this.IsPropertyKey(e))throw new TypeError("P must be a Property Key");if("Boolean"!==this.Type(o))throw new TypeError("Throw must be a Boolean");if(o)return t[e]=r,!0;try{t[e]=r}catch(t){return!1}},HasOwnProperty:function(t,e){if("Object"!==this.Type(t))throw new TypeError("O must be an Object");if(!this.IsPropertyKey(e))throw new TypeError("P must be a Property Key");return o(t,e)},HasProperty:function(t,e){if("Object"!==this.Type(t))throw new TypeError("O must be an Object");if(!this.IsPropertyKey(e))throw new TypeError("P must be a Property Key");return e in t},IsConcatSpreadable:function(t){if("Object"!==this.Type(t))return!1;if(s&&"symbol"==typeof Symbol.isConcatSpreadable){var e=this.Get(t,Symbol.isConcatSpreadable);if(void 0!==e)return this.ToBoolean(e)}return this.IsArray(t)},Invoke:function(t,e){if(!this.IsPropertyKey(e))throw new TypeError("P must be a Property Key");var r=v(arguments,2),o=this.GetV(t,e);return this.Call(o,t,r)},CreateIterResultObject:function(t,e){if("Boolean"!==this.Type(e))throw new TypeError("Assertion failed: Type(done) is not Boolean");return{value:t,done:e}},RegExpExec:function(t,e){if("Object"!==this.Type(t))throw new TypeError("R must be an Object");if("String"!==this.Type(e))throw new TypeError("S must be a String");var r=this.Get(t,"exec");if(this.IsCallable(r)){var o=this.Call(r,t,[e]);if(null===o||"Object"===this.Type(o))return o;throw new TypeError('"exec" method must return `null` or an Object')}return w(t,e)},ArraySpeciesCreate:function(t,e){if(!this.IsInteger(e)||e<0)throw new TypeError("Assertion failed: length must be an integer >= 0");var r,o=0===e?0:e;if(this.IsArray(t)&&(r=this.Get(t,"constructor"),"Object"===this.Type(r)&&s&&Symbol.species&&null===(r=this.Get(r,Symbol.species))&&(r=void 0)),void 0===r)return Array(o);if(!this.IsConstructor(r))throw new TypeError("C must be a constructor");return new r(o)},CreateDataProperty:function(t,e,r){if("Object"!==this.Type(t))throw new TypeError("Assertion failed: Type(O) is not Object");if(!this.IsPropertyKey(e))throw new TypeError("Assertion failed: IsPropertyKey(P) is not true");var o=Object.getOwnPropertyDescriptor(t,e),n=o||"function"!=typeof Object.isExtensible||Object.isExtensible(t);if(o&&(!o.writable||!o.configurable)||!n)return!1;var i={configurable:!0,enumerable:!0,value:r,writable:!0};return Object.defineProperty(t,e,i),!0},CreateDataPropertyOrThrow:function(t,e,r){if("Object"!==this.Type(t))throw new TypeError("Assertion failed: Type(O) is not Object");if(!this.IsPropertyKey(e))throw new TypeError("Assertion failed: IsPropertyKey(P) is not true");var o=this.CreateDataProperty(t,e,r);if(!o)throw new TypeError("unable to create data property");return o},AdvanceStringIndex:function(t,e,r){if("String"!==this.Type(t))throw new TypeError("Assertion failed: Type(S) is not String");if(!this.IsInteger(e))throw new TypeError("Assertion failed: length must be an integer >= 0 and <= (2**53 - 1)");if(e<0||e>u)throw new RangeError("Assertion failed: length must be an integer >= 0 and <= (2**53 - 1)");if("Boolean"!==this.Type(r))throw new TypeError("Assertion failed: Type(unicode) is not Boolean");if(!r)return e+1;if(e+1>=t.length)return e+1;var o=t.charCodeAt(e);if(o<55296||o>56319)return e+1;var n=t.charCodeAt(e+1);return n<56320||n>57343?e+1:e+2}});delete N.CheckObjectCoercible,e.exports=N},{"./es5":4,"./helpers/assign":6,"./helpers/isFinite":7,"./helpers/isNaN":8,"./helpers/isPrimitive":9,"./helpers/mod":10,"./helpers/sign":11,"es-to-primitive/es6":13,"function-bind":17,has:18,"is-regex":21}],3:[function(t,e,r){"use strict";var o=t("./es2015"),n=t("./helpers/assign"),i=n(n({},o),{SameValueNonNumber:function(t,e){if("number"==typeof t||typeof t!=typeof e)throw new TypeError("SameValueNonNumber requires two non-number values of the same type.");return this.SameValue(t,e)}});e.exports=i},{"./es2015":2,"./helpers/assign":6}],4:[function(t,e,r){"use strict";var o=t("./helpers/isNaN"),n=t("./helpers/isFinite"),i=t("./helpers/sign"),s=t("./helpers/mod"),a=t("is-callable"),c=t("es-to-primitive/es5"),u=t("has"),l={ToPrimitive:c,ToBoolean:function(t){return!!t},ToNumber:function(t){return Number(t)},ToInteger:function(t){var e=this.ToNumber(t);return o(e)?0:0!==e&&n(e)?i(e)*Math.floor(Math.abs(e)):e},ToInt32:function(t){return this.ToNumber(t)>>0},ToUint32:function(t){return this.ToNumber(t)>>>0},ToUint16:function(t){var e=this.ToNumber(t);if(o(e)||0===e||!n(e))return 0;var r=i(e)*Math.floor(Math.abs(e));return s(r,65536)},ToString:function(t){return String(t)},ToObject:function(t){return this.CheckObjectCoercible(t),Object(t)},CheckObjectCoercible:function(t,e){if(null==t)throw new TypeError(e||"Cannot call method on "+t);return t},IsCallable:a,SameValue:function(t,e){return t===e?0!==t||1/t==1/e:o(t)&&o(e)},Type:function(t){return null===t?"Null":void 0===t?"Undefined":"function"==typeof t||"object"==typeof t?"Object":"number"==typeof t?"Number":"boolean"==typeof t?"Boolean":"string"==typeof t?"String":void 0},IsPropertyDescriptor:function(t){if("Object"!==this.Type(t))return!1;var e={"[[Configurable]]":!0,"[[Enumerable]]":!0,"[[Get]]":!0,"[[Set]]":!0,"[[Value]]":!0,"[[Writable]]":!0};for(var r in t)if(u(t,r)&&!e[r])return!1;var o=u(t,"[[Value]]"),n=u(t,"[[Get]]")||u(t,"[[Set]]");if(o&&n)throw new TypeError("Property Descriptors may not be both accessor and data descriptors");return!0},IsAccessorDescriptor:function(t){if(void 0===t)return!1;if(!this.IsPropertyDescriptor(t))throw new TypeError("Desc must be a Property Descriptor");return!(!u(t,"[[Get]]")&&!u(t,"[[Set]]"))},IsDataDescriptor:function(t){if(void 0===t)return!1;if(!this.IsPropertyDescriptor(t))throw new TypeError("Desc must be a Property Descriptor");return!(!u(t,"[[Value]]")&&!u(t,"[[Writable]]"))},IsGenericDescriptor:function(t){if(void 0===t)return!1;if(!this.IsPropertyDescriptor(t))throw new TypeError("Desc must be a Property Descriptor");return!this.IsAccessorDescriptor(t)&&!this.IsDataDescriptor(t)},FromPropertyDescriptor:function(t){if(void 0===t)return t;if(!this.IsPropertyDescriptor(t))throw new TypeError("Desc must be a Property Descriptor");if(this.IsDataDescriptor(t))return{value:t["[[Value]]"],writable:!!t["[[Writable]]"],enumerable:!!t["[[Enumerable]]"],configurable:!!t["[[Configurable]]"]};if(this.IsAccessorDescriptor(t))return{get:t["[[Get]]"],set:t["[[Set]]"],enumerable:!!t["[[Enumerable]]"],configurable:!!t["[[Configurable]]"]};throw new TypeError("FromPropertyDescriptor must be called with a fully populated Property Descriptor")},ToPropertyDescriptor:function(t){if("Object"!==this.Type(t))throw new TypeError("ToPropertyDescriptor requires an object");var e={};if(u(t,"enumerable")&&(e["[[Enumerable]]"]=this.ToBoolean(t.enumerable)),u(t,"configurable")&&(e["[[Configurable]]"]=this.ToBoolean(t.configurable)),u(t,"value")&&(e["[[Value]]"]=t.value),u(t,"writable")&&(e["[[Writable]]"]=this.ToBoolean(t.writable)),u(t,"get")){var r=t.get;if(void 0!==r&&!this.IsCallable(r))throw new TypeError("getter must be a function");e["[[Get]]"]=r}if(u(t,"set")){var o=t.set;if(void 0!==o&&!this.IsCallable(o))throw new TypeError("setter must be a function");e["[[Set]]"]=o}if((u(e,"[[Get]]")||u(e,"[[Set]]"))&&(u(e,"[[Value]]")||u(e,"[[Writable]]")))throw new TypeError("Invalid property descriptor. Cannot both specify accessors and a value or writable attribute");return e}};e.exports=l},{"./helpers/isFinite":7,"./helpers/isNaN":8,"./helpers/mod":10,"./helpers/sign":11,"es-to-primitive/es5":12,has:18,"is-callable":19}],5:[function(t,e,r){"use strict";e.exports=t("./es2016")},{"./es2016":3}],6:[function(t,e,r){var o=Object.prototype.hasOwnProperty;e.exports=function(t,e){if(Object.assign)return Object.assign(t,e);for(var r in e)o.call(e,r)&&(t[r]=e[r]);return t}},{}],7:[function(t,e,r){var o=Number.isNaN||function(t){return t!=t};e.exports=Number.isFinite||function(t){return"number"==typeof t&&!o(t)&&t!==1/0&&t!==-1/0}},{}],8:[function(t,e,r){e.exports=Number.isNaN||function(t){return t!=t}},{}],9:[function(t,e,r){e.exports=function(t){return null===t||"function"!=typeof t&&"object"!=typeof t}},{}],10:[function(t,e,r){e.exports=function(t,e){var r=t%e;return Math.floor(r>=0?r:r+e)}},{}],11:[function(t,e,r){e.exports=function(t){return t>=0?1:-1}},{}],12:[function(t,e,r){"use strict";var o=Object.prototype.toString,n=t("./helpers/isPrimitive"),i=t("is-callable"),s=function(t,e){var r=e||("[object Date]"===o.call(t)?String:Number);if(r===String||r===Number){var s,a,c=r===String?["toString","valueOf"]:["valueOf","toString"];for(a=0;a<c.length;++a)if(i(t[c[a]])&&(s=t[c[a]](),n(s)))return s;throw new TypeError("No default value")}throw new TypeError("invalid [[DefaultValue]] hint supplied")};e.exports=function(t,e){return n(t)?t:s(t,e)}},{"./helpers/isPrimitive":14,"is-callable":19}],13:[function(t,e,r){"use strict";var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator,n=t("./helpers/isPrimitive"),i=t("is-callable"),s=t("is-date-object"),a=t("is-symbol");e.exports=function(t,e){if(n(t))return t;var r,c="default";if(arguments.length>1&&(e===String?c="string":e===Number&&(c="number")),o&&(Symbol.toPrimitive?r=function(t,e){var r=t[e];if(null!==r&&void 0!==r){if(!i(r))throw new TypeError(r+" returned for property "+e+" of object "+t+" is not a function");return r}}(t,Symbol.toPrimitive):a(t)&&(r=Symbol.prototype.valueOf)),void 0!==r){var u=r.call(t,c);if(n(u))return u;throw new TypeError("unable to convert exotic object to primitive")}return"default"===c&&(s(t)||a(t))&&(c="string"),function(t,e){if(void 0===t||null===t)throw new TypeError("Cannot call method on "+t);if("string"!=typeof e||"number"!==e&&"string"!==e)throw new TypeError('hint must be "string" or "number"');var r,o,s,a="string"===e?["toString","valueOf"]:["valueOf","toString"];for(s=0;s<a.length;++s)if(r=t[a[s]],i(r)&&(o=r.call(t),n(o)))return o;throw new TypeError("No default value")}(t,"default"===c?"number":c)}},{"./helpers/isPrimitive":14,"is-callable":19,"is-date-object":20,"is-symbol":22}],14:[function(t,e,r){arguments[4][9][0].apply(r,arguments)},{dup:9}],15:[function(t,e,r){var o=Object.prototype.hasOwnProperty,n=Object.prototype.toString;e.exports=function(t,e,r){if("[object Function]"!==n.call(e))throw new TypeError("iterator must be a function");var i=t.length;if(i===+i)for(var s=0;s<i;s++)e.call(r,t[s],s,t);else for(var a in t)o.call(t,a)&&e.call(r,t[a],a,t)}},{}],16:[function(t,e,r){"use strict";var o=Array.prototype.slice,n=Object.prototype.toString;e.exports=function(t){var e=this;if("function"!=typeof e||"[object Function]"!==n.call(e))throw new TypeError("Function.prototype.bind called on incompatible "+e);for(var r,i=o.call(arguments,1),s=Math.max(0,e.length-i.length),a=[],c=0;c<s;c++)a.push("$"+c);if(r=Function("binder","return function ("+a.join(",")+"){ return binder.apply(this,arguments); }")(function(){if(this instanceof r){var n=e.apply(this,i.concat(o.call(arguments)));return Object(n)===n?n:this}return e.apply(t,i.concat(o.call(arguments)))}),e.prototype){var u=function(){};u.prototype=e.prototype,r.prototype=new u,u.prototype=null}return r}},{}],17:[function(t,e,r){"use strict";var o=t("./implementation");e.exports=Function.prototype.bind||o},{"./implementation":16}],18:[function(t,e,r){var o=t("function-bind");e.exports=o.call(Function.call,Object.prototype.hasOwnProperty)},{"function-bind":17}],19:[function(t,e,r){"use strict";var o=Function.prototype.toString,n=/^\s*class /,i=function(t){try{var e=o.call(t).replace(/\/\/.*\n/g,"").replace(/\/\*[.\s\S]*\*\//g,"").replace(/\n/gm," ").replace(/ {2}/g," ");return n.test(e)}catch(t){return!1}},s=Object.prototype.toString,a="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;e.exports=function(t){if(!t)return!1;if("function"!=typeof t&&"object"!=typeof t)return!1;if(a)return function(t){try{return!i(t)&&(o.call(t),!0)}catch(t){return!1}}(t);if(i(t))return!1;var e=s.call(t);return"[object Function]"===e||"[object GeneratorFunction]"===e}},{}],20:[function(t,e,r){"use strict";var o=Date.prototype.getDay,n=Object.prototype.toString,i="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;e.exports=function(t){return"object"==typeof t&&null!==t&&(i?function(t){try{return o.call(t),!0}catch(t){return!1}}(t):"[object Date]"===n.call(t))}},{}],21:[function(t,e,r){"use strict";var o=t("has"),n=RegExp.prototype.exec,i=Object.getOwnPropertyDescriptor,s=Object.prototype.toString,a="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;e.exports=function(t){if(!t||"object"!=typeof t)return!1;if(!a)return"[object RegExp]"===s.call(t);var e=i(t,"lastIndex");return!(!e||!o(e,"value"))&&function(t){try{var e=t.lastIndex;return t.lastIndex=0,n.call(t),!0}catch(t){return!1}finally{t.lastIndex=e}}(t)}},{has:18}],22:[function(t,e,r){"use strict";var o=Object.prototype.toString;if("function"==typeof Symbol&&"symbol"==typeof Symbol()){var n=Symbol.prototype.toString,i=/^Symbol\(.*\)$/;e.exports=function(t){if("symbol"==typeof t)return!0;if("[object Symbol]"!==o.call(t))return!1;try{return"symbol"==typeof(e=t).valueOf()&&i.test(n.call(e))}catch(t){return!1}var e}}else e.exports=function(t){return!1}},{}],23:[function(t,e,r){"use strict";var o=Object.prototype.hasOwnProperty,n=Object.prototype.toString,i=Array.prototype.slice,s=t("./isArguments"),a=Object.prototype.propertyIsEnumerable,c=!a.call({toString:null},"toString"),u=a.call(function(){},"prototype"),l=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],p=function(t){var e=t.constructor;return e&&e.prototype===t},f={$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},y=function(){if("undefined"==typeof window)return!1;for(var t in window)try{if(!f["$"+t]&&o.call(window,t)&&null!==window[t]&&"object"==typeof window[t])try{p(window[t])}catch(t){return!0}}catch(t){return!0}return!1}(),h=function(t){var e=null!==t&&"object"==typeof t,r="[object Function]"===n.call(t),i=s(t),a=e&&"[object String]"===n.call(t),f=[];if(!e&&!r&&!i)throw new TypeError("Object.keys called on a non-object");var h=u&&r;if(a&&t.length>0&&!o.call(t,0))for(var b=0;b<t.length;++b)f.push(String(b));if(i&&t.length>0)for(var v=0;v<t.length;++v)f.push(String(v));else for(var m in t)h&&"prototype"===m||!o.call(t,m)||f.push(String(m));if(c)for(var g=function(t){if("undefined"==typeof window||!y)return p(t);try{return p(t)}catch(t){return!1}}(t),d=0;d<l.length;++d)g&&"constructor"===l[d]||!o.call(t,l[d])||f.push(l[d]);return f};h.shim=function(){if(Object.keys){if(!function(){return 2===(Object.keys(arguments)||"").length}(1,2)){var t=Object.keys;Object.keys=function(e){return s(e)?t(i.call(e)):t(e)}}}else Object.keys=h;return Object.keys||h},e.exports=h},{"./isArguments":24}],24:[function(t,e,r){"use strict";var o=Object.prototype.toString;e.exports=function(t){var e=o.call(t),r="[object Arguments]"===e;return r||(r="[object Array]"!==e&&null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Function]"===o.call(t.callee)),r}},{}],25:[function(t,e,r){"use strict";var o=t("es-abstract/es7"),n=t("has"),i=t("function-bind").call(Function.call,Object.prototype.propertyIsEnumerable);e.exports=function(t){var e=o.RequireObjectCoercible(t),r=[];for(var s in e)n(e,s)&&i(e,s)&&r.push(e[s]);return r}},{"es-abstract/es7":5,"function-bind":17,has:18}],26:[function(t,e,r){"use strict";var o=t("define-properties"),n=t("./implementation"),i=t("./polyfill"),s=t("./shim"),a=i();o(a,{getPolyfill:i,implementation:n,shim:s}),e.exports=a},{"./implementation":25,"./polyfill":27,"./shim":28,"define-properties":1}],27:[function(t,e,r){"use strict";var o=t("./implementation");e.exports=function(){return"function"==typeof Object.values?Object.values:o}},{"./implementation":25}],28:[function(t,e,r){"use strict";var o=t("./polyfill"),n=t("define-properties");e.exports=function(){var t=o();return n(Object,{values:t},{values:function(){return Object.values!==t}}),t}},{"./polyfill":27,"define-properties":1}],29:[function(t,e,r){String.prototype.includes||function(){"use strict";var t={}.toString,e=function(){try{var t={},e=Object.defineProperty,r=e(t,t,t)&&e}catch(t){}return r}(),r="".indexOf,o=function(e){if(null==this)throw TypeError();var o=String(this);if(e&&"[object RegExp]"==t.call(e))throw TypeError();var n=o.length,i=String(e),s=i.length,a=arguments.length>1?arguments[1]:void 0,c=a?Number(a):0;return c!=c&&(c=0),!(s+Math.min(Math.max(c,0),n)>n)&&-1!=r.call(o,i,c)};e?e(String.prototype,"includes",{value:o,configurable:!0,writable:!0}):String.prototype.includes=o}()},{}],30:[function(t,e,r){String.prototype.startsWith||function(){"use strict";var t=function(){try{var t={},e=Object.defineProperty,r=e(t,t,t)&&e}catch(t){}return r}(),e={}.toString,r=function(t){if(null==this)throw TypeError();var r=String(this);if(t&&"[object RegExp]"==e.call(t))throw TypeError();var o=r.length,n=String(t),i=n.length,s=arguments.length>1?arguments[1]:void 0,a=s?Number(s):0;a!=a&&(a=0);var c=Math.min(Math.max(a,0),o);if(i+c>o)return!1;for(var u=-1;++u<i;)if(r.charCodeAt(c+u)!=n.charCodeAt(u))return!1;return!0};t?t(String.prototype,"startsWith",{value:r,configurable:!0,writable:!0}):String.prototype.startsWith=r}()},{}],31:[function(t,e,r){"use strict";var o={isMobile:!1,hasTouch:!1,projects:[]},n=t("./selectors"),i=n.MAIN_NAV,s=(n.BANNER,n.LOGO_WRAP,n.TROWEL_ICON),a=n.SEARCH_RESULTS,c=n.SEARCH_ICON,u=n.CLEAR_ICON,l=t("object.values"),p=t("./utils").findMatches;function f(){l(arguments).forEach(function(t){$(t).addClass("hidden")})}function y(){l(arguments).forEach(function(t){$(t).removeClass("hidden")})}function h(){$(a).removeClass("open"),$(a).html("")}function b(){y(c),f(u)}function v(t){if(""===(t=t.toLowerCase().trim()))return h(),void b();f(c),y(u);var e=o.projects,r=p(e,"name",t).map(function(t){return'\n                        <li>\n                            <a href="'+t.url+'">'+t.name+"</a>\n                        </li>\n                    "});r.length>0?$(a).addClass("open").html(r.join("")):h()}var m=t("./utils"),g=m.fixBanner,d=(m.expandNav,m.shrinkNav,m.toggleHeaderBgImg),w=m.setBgImgHeight,T=m.fadeOutLoadScreen;function j(){var t=window.innerWidth;o.isMobile=t<=414,o.hasTouch&&w(),t<1060&&$("header").css("z-index",""),g()}function S(){$(s).on("click",function(t){t.preventDefault(),function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1200,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;$("body, html").animate({scrollTop:$(t).offset().top-r},e)}("#overview",1e3,-60)})}function O(){$(".burger-btn").on("click",function(t){t.preventDefault(),$(".burger-btn, .burger-icon, "+i).toggleClass("open")}),S()}function E(){$(".category-form select").on("change",function(t){t.preventDefault();var e="/projects/"+t.target.value;location.href=e}),$(".search-bar").on("input",function(t){t.preventDefault(),console.log("Changed!"),v(t.target.value)}),$(u).on("click",function(t){t.preventDefault(),h(),b(),$(".search-bar").val("").focus()})}var x=t("./slideshow").startSlideShow;function I(){j(),$(window).resize(j),$(window).scroll(function(t){"/"===location.pathname&&(d(),g())}),$(window).on("touchstart",function(t){o.hasTouch=!0,w(),$(window).off("touchstart")}),t("string.prototype.includes"),t("string.prototype.startswith")}function C(){"/"===location.pathname&&(d(),g()),o.hasTouch&&w(),T(),x(4e3),$.ajax({url:"/projects/all/json",type:"GET",dataType:"json",success:function(t){o.projects=t.projects,console.log(o.projects)},error:function(t,e,r){console.log(r)}})}$(function(){I(),O(),E(),C()})},{"./selectors":32,"./slideshow":33,"./utils":34,"object.values":26,"string.prototype.includes":29,"string.prototype.startswith":30}],32:[function(t,e,r){"use strict";e.exports={MAIN_NAV:".main-nav",BANNER:".banner",LOGO_WRAP:".logo-a-wrap",TROWEL_ICON:".icon-trowel-outline",SEARCH_RESULTS:".search-results",SEARCH_ICON:".icon-search-icon",CLEAR_ICON:".icon-clear-icon"}},{}],33:[function(t,e,r){"use strict";function o(){var t=$(".slide.current"),e=parseInt(t.attr("data-slide-num")),r=e<$(".slide").length?e+1:1;t.removeClass("current"),$('.slide[data-slide-num="'+r+'"]').addClass("current")}e.exports={nextSlide:o,startSlideShow:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:6e3;setInterval(function(){o()},t)}}},{}],34:[function(t,e,r){"use strict";var o=t("./selectors"),n=o.MAIN_NAV,i=o.BANNER,s=o.LOGO_WRAP,a=(o.TROWEL_ICON,function(){$(n).add(i).add("header").add(s).addClass("shrink")}),c=function(){$(n).add(i).add("header").add(s).removeClass("shrink")};e.exports={shrinkNav:a,expandNav:c,fixBanner:function(){var t=$(window).scrollTop();$(n).offset().top-t<=40?$(n).addClass("fixed"):$(n).removeClass("fixed");var e=$("header").height()-$(window).scrollTop();e<=0?a():e>0&&window.innerWidth<=899&&$("header").removeClass("shrink"),e>=100&&c()},toggleHeaderBgImg:function(){$(window).scrollTop()>2*$("header").height()?$("header").addClass("remove"):$("header").removeClass("remove")},setBgImgHeight:function(){var t=$("header");t.css("max-height","");var e=t.height();t.css("max-height",e)},fadeOutLoadScreen:function(){setTimeout(function(){$(".loading-page, .loading-page svg").addClass("fade-out"),setTimeout(function(){$("body").removeClass("no-scroll")},700),setTimeout(function(){$(".loading-page").remove()},2e3)},500)},findMatches:function(t,e,r){var o=[],n=!0,i=!1,s=void 0;try{for(var a,c=t[Symbol.iterator]();!(n=(a=c.next()).done);n=!0){var u=a.value,l=!1,p=u[e].toLowerCase().trim();if(p.startsWith(r)&&(console.log("current: ",p," starts with ",r),o.push(u),l=!0),!l)for(var f=p.split(" "),y=r.split(" "),h=0;h<y.length&&!l;h++)for(var b=0;b<f.length&&!l;b++)f[b].startsWith(y[h])&&(o.push(u),l=!0)}}catch(t){i=!0,s=t}finally{try{!n&&c.return&&c.return()}finally{if(i)throw s}}return o}}},{"./selectors":32}]},{},[31]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
