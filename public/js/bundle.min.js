!function e(t,r,o){function n(s,a){if(!r[s]){if(!t[s]){var u="function"==typeof require&&require;if(!a&&u)return u(s,!0);if(i)return i(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var l=r[s]={exports:{}};t[s][0].call(l.exports,function(e){var r=t[s][1][e];return n(r||e)},l,l.exports,e,t,r,o)}return r[s].exports}for(var i="function"==typeof require&&require,s=0;s<o.length;s++)n(o[s]);return n}({1:[function(e,t,r){"use strict";var o=e("object-keys"),n=e("foreach"),i="function"==typeof Symbol&&"symbol"==typeof Symbol(),s=Object.prototype.toString,a=Object.defineProperty&&function(){var e={};try{Object.defineProperty(e,"x",{enumerable:!1,value:e});for(var t in e)return!1;return e.x===e}catch(e){return!1}}(),u=function(e,t,r,o){var n;t in e&&("function"!=typeof(n=o)||"[object Function]"!==s.call(n)||!o())||(a?Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:r,writable:!0}):e[t]=r)},c=function(e,t){var r=arguments.length>2?arguments[2]:{},s=o(t);i&&(s=s.concat(Object.getOwnPropertySymbols(t))),n(s,function(o){u(e,o,t[o],r[o])})};c.supportsDescriptors=!!a,t.exports=c},{foreach:15,"object-keys":23}],2:[function(e,t,r){"use strict";var o=e("has"),n=e("es-to-primitive/es6"),i=Object.prototype.toString,s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator,a=e("./helpers/isNaN"),u=e("./helpers/isFinite"),c=Number.MAX_SAFE_INTEGER||Math.pow(2,53)-1,l=e("./helpers/assign"),p=e("./helpers/sign"),f=e("./helpers/mod"),y=e("./helpers/isPrimitive"),b=parseInt,h=e("function-bind"),m=h.call(Function.call,Array.prototype.slice),v=h.call(Function.call,String.prototype.slice),d=h.call(Function.call,RegExp.prototype.test,/^0b[01]+$/i),g=h.call(Function.call,RegExp.prototype.test,/^0o[0-7]+$/i),w=h.call(Function.call,RegExp.prototype.exec),T=["","​","￾"].join(""),O=new RegExp("["+T+"]","g"),j=h.call(Function.call,RegExp.prototype.test,O),S=h.call(Function.call,RegExp.prototype.test,/^[-+]0x[0-9a-f]+$/i),E=["\t\n\v\f\r   ᠎    ","         　\u2028","\u2029\ufeff"].join(""),I=new RegExp("(^["+E+"]+)|(["+E+"]+$)","g"),x=h.call(Function.call,String.prototype.replace),P=e("./es5"),N=e("is-regex"),C=l(l({},P),{Call:function(e,t){var r=arguments.length>2?arguments[2]:[];if(!this.IsCallable(e))throw new TypeError(e+" is not a function");return e.apply(t,r)},ToPrimitive:n,ToNumber:function(e){var t=y(e)?e:n(e,Number);if("symbol"==typeof t)throw new TypeError("Cannot convert a Symbol value to a number");if("string"==typeof t){if(d(t))return this.ToNumber(b(v(t,2),2));if(g(t))return this.ToNumber(b(v(t,2),8));if(j(t)||S(t))return NaN;var r=x(t,I,"");if(r!==t)return this.ToNumber(r)}return Number(t)},ToInt16:function(e){var t=this.ToUint16(e);return t>=32768?t-65536:t},ToInt8:function(e){var t=this.ToUint8(e);return t>=128?t-256:t},ToUint8:function(e){var t=this.ToNumber(e);if(a(t)||0===t||!u(t))return 0;var r=p(t)*Math.floor(Math.abs(t));return f(r,256)},ToUint8Clamp:function(e){var t=this.ToNumber(e);if(a(t)||t<=0)return 0;if(t>=255)return 255;var r=Math.floor(e);return r+.5<t?r+1:t<r+.5?r:r%2!=0?r+1:r},ToString:function(e){if("symbol"==typeof e)throw new TypeError("Cannot convert a Symbol value to a string");return String(e)},ToObject:function(e){return this.RequireObjectCoercible(e),Object(e)},ToPropertyKey:function(e){var t=this.ToPrimitive(e,String);return"symbol"==typeof t?t:this.ToString(t)},ToLength:function(e){var t=this.ToInteger(e);return t<=0?0:t>c?c:t},CanonicalNumericIndexString:function(e){if("[object String]"!==i.call(e))throw new TypeError("must be a string");if("-0"===e)return-0;var t=this.ToNumber(e);return this.SameValue(this.ToString(t),e)?t:void 0},RequireObjectCoercible:P.CheckObjectCoercible,IsArray:Array.isArray||function(e){return"[object Array]"===i.call(e)},IsConstructor:function(e){return"function"==typeof e&&!!e.prototype},IsExtensible:function(e){return!Object.preventExtensions||!y(e)&&Object.isExtensible(e)},IsInteger:function(e){if("number"!=typeof e||a(e)||!u(e))return!1;var t=Math.abs(e);return Math.floor(t)===t},IsPropertyKey:function(e){return"string"==typeof e||"symbol"==typeof e},IsRegExp:function(e){if(!e||"object"!=typeof e)return!1;if(s){var t=e[Symbol.match];if(void 0!==t)return P.ToBoolean(t)}return N(e)},SameValueZero:function(e,t){return e===t||a(e)&&a(t)},GetV:function(e,t){if(!this.IsPropertyKey(t))throw new TypeError("Assertion failed: IsPropertyKey(P) is not true");return this.ToObject(e)[t]},GetMethod:function(e,t){if(!this.IsPropertyKey(t))throw new TypeError("Assertion failed: IsPropertyKey(P) is not true");var r=this.GetV(e,t);if(null!=r){if(!this.IsCallable(r))throw new TypeError(t+"is not a function");return r}},Get:function(e,t){if("Object"!==this.Type(e))throw new TypeError("Assertion failed: Type(O) is not Object");if(!this.IsPropertyKey(t))throw new TypeError("Assertion failed: IsPropertyKey(P) is not true");return e[t]},Type:function(e){return"symbol"==typeof e?"Symbol":P.Type(e)},SpeciesConstructor:function(e,t){if("Object"!==this.Type(e))throw new TypeError("Assertion failed: Type(O) is not Object");var r=e.constructor;if(void 0===r)return t;if("Object"!==this.Type(r))throw new TypeError("O.constructor is not an Object");var o=s&&Symbol.species?r[Symbol.species]:void 0;if(null==o)return t;if(this.IsConstructor(o))return o;throw new TypeError("no constructor found")},CompletePropertyDescriptor:function(e){if(!this.IsPropertyDescriptor(e))throw new TypeError("Desc must be a Property Descriptor");return this.IsGenericDescriptor(e)||this.IsDataDescriptor(e)?(o(e,"[[Value]]")||(e["[[Value]]"]=void 0),o(e,"[[Writable]]")||(e["[[Writable]]"]=!1)):(o(e,"[[Get]]")||(e["[[Get]]"]=void 0),o(e,"[[Set]]")||(e["[[Set]]"]=void 0)),o(e,"[[Enumerable]]")||(e["[[Enumerable]]"]=!1),o(e,"[[Configurable]]")||(e["[[Configurable]]"]=!1),e},Set:function(e,t,r,o){if("Object"!==this.Type(e))throw new TypeError("O must be an Object");if(!this.IsPropertyKey(t))throw new TypeError("P must be a Property Key");if("Boolean"!==this.Type(o))throw new TypeError("Throw must be a Boolean");if(o)return e[t]=r,!0;try{e[t]=r}catch(e){return!1}},HasOwnProperty:function(e,t){if("Object"!==this.Type(e))throw new TypeError("O must be an Object");if(!this.IsPropertyKey(t))throw new TypeError("P must be a Property Key");return o(e,t)},HasProperty:function(e,t){if("Object"!==this.Type(e))throw new TypeError("O must be an Object");if(!this.IsPropertyKey(t))throw new TypeError("P must be a Property Key");return t in e},IsConcatSpreadable:function(e){if("Object"!==this.Type(e))return!1;if(s&&"symbol"==typeof Symbol.isConcatSpreadable){var t=this.Get(e,Symbol.isConcatSpreadable);if(void 0!==t)return this.ToBoolean(t)}return this.IsArray(e)},Invoke:function(e,t){if(!this.IsPropertyKey(t))throw new TypeError("P must be a Property Key");var r=m(arguments,2),o=this.GetV(e,t);return this.Call(o,e,r)},CreateIterResultObject:function(e,t){if("Boolean"!==this.Type(t))throw new TypeError("Assertion failed: Type(done) is not Boolean");return{value:e,done:t}},RegExpExec:function(e,t){if("Object"!==this.Type(e))throw new TypeError("R must be an Object");if("String"!==this.Type(t))throw new TypeError("S must be a String");var r=this.Get(e,"exec");if(this.IsCallable(r)){var o=this.Call(r,e,[t]);if(null===o||"Object"===this.Type(o))return o;throw new TypeError('"exec" method must return `null` or an Object')}return w(e,t)},ArraySpeciesCreate:function(e,t){if(!this.IsInteger(t)||t<0)throw new TypeError("Assertion failed: length must be an integer >= 0");var r,o=0===t?0:t;if(this.IsArray(e)&&(r=this.Get(e,"constructor"),"Object"===this.Type(r)&&s&&Symbol.species&&null===(r=this.Get(r,Symbol.species))&&(r=void 0)),void 0===r)return Array(o);if(!this.IsConstructor(r))throw new TypeError("C must be a constructor");return new r(o)},CreateDataProperty:function(e,t,r){if("Object"!==this.Type(e))throw new TypeError("Assertion failed: Type(O) is not Object");if(!this.IsPropertyKey(t))throw new TypeError("Assertion failed: IsPropertyKey(P) is not true");var o=Object.getOwnPropertyDescriptor(e,t),n=o||"function"!=typeof Object.isExtensible||Object.isExtensible(e);if(o&&(!o.writable||!o.configurable)||!n)return!1;var i={configurable:!0,enumerable:!0,value:r,writable:!0};return Object.defineProperty(e,t,i),!0},CreateDataPropertyOrThrow:function(e,t,r){if("Object"!==this.Type(e))throw new TypeError("Assertion failed: Type(O) is not Object");if(!this.IsPropertyKey(t))throw new TypeError("Assertion failed: IsPropertyKey(P) is not true");var o=this.CreateDataProperty(e,t,r);if(!o)throw new TypeError("unable to create data property");return o},AdvanceStringIndex:function(e,t,r){if("String"!==this.Type(e))throw new TypeError("Assertion failed: Type(S) is not String");if(!this.IsInteger(t))throw new TypeError("Assertion failed: length must be an integer >= 0 and <= (2**53 - 1)");if(t<0||t>c)throw new RangeError("Assertion failed: length must be an integer >= 0 and <= (2**53 - 1)");if("Boolean"!==this.Type(r))throw new TypeError("Assertion failed: Type(unicode) is not Boolean");if(!r)return t+1;if(t+1>=e.length)return t+1;var o=e.charCodeAt(t);if(o<55296||o>56319)return t+1;var n=e.charCodeAt(t+1);return n<56320||n>57343?t+1:t+2}});delete C.CheckObjectCoercible,t.exports=C},{"./es5":4,"./helpers/assign":6,"./helpers/isFinite":7,"./helpers/isNaN":8,"./helpers/isPrimitive":9,"./helpers/mod":10,"./helpers/sign":11,"es-to-primitive/es6":13,"function-bind":17,has:18,"is-regex":21}],3:[function(e,t,r){"use strict";var o=e("./es2015"),n=e("./helpers/assign"),i=n(n({},o),{SameValueNonNumber:function(e,t){if("number"==typeof e||typeof e!=typeof t)throw new TypeError("SameValueNonNumber requires two non-number values of the same type.");return this.SameValue(e,t)}});t.exports=i},{"./es2015":2,"./helpers/assign":6}],4:[function(e,t,r){"use strict";var o=e("./helpers/isNaN"),n=e("./helpers/isFinite"),i=e("./helpers/sign"),s=e("./helpers/mod"),a=e("is-callable"),u=e("es-to-primitive/es5"),c=e("has"),l={ToPrimitive:u,ToBoolean:function(e){return!!e},ToNumber:function(e){return Number(e)},ToInteger:function(e){var t=this.ToNumber(e);return o(t)?0:0!==t&&n(t)?i(t)*Math.floor(Math.abs(t)):t},ToInt32:function(e){return this.ToNumber(e)>>0},ToUint32:function(e){return this.ToNumber(e)>>>0},ToUint16:function(e){var t=this.ToNumber(e);if(o(t)||0===t||!n(t))return 0;var r=i(t)*Math.floor(Math.abs(t));return s(r,65536)},ToString:function(e){return String(e)},ToObject:function(e){return this.CheckObjectCoercible(e),Object(e)},CheckObjectCoercible:function(e,t){if(null==e)throw new TypeError(t||"Cannot call method on "+e);return e},IsCallable:a,SameValue:function(e,t){return e===t?0!==e||1/e==1/t:o(e)&&o(t)},Type:function(e){return null===e?"Null":void 0===e?"Undefined":"function"==typeof e||"object"==typeof e?"Object":"number"==typeof e?"Number":"boolean"==typeof e?"Boolean":"string"==typeof e?"String":void 0},IsPropertyDescriptor:function(e){if("Object"!==this.Type(e))return!1;var t={"[[Configurable]]":!0,"[[Enumerable]]":!0,"[[Get]]":!0,"[[Set]]":!0,"[[Value]]":!0,"[[Writable]]":!0};for(var r in e)if(c(e,r)&&!t[r])return!1;var o=c(e,"[[Value]]"),n=c(e,"[[Get]]")||c(e,"[[Set]]");if(o&&n)throw new TypeError("Property Descriptors may not be both accessor and data descriptors");return!0},IsAccessorDescriptor:function(e){if(void 0===e)return!1;if(!this.IsPropertyDescriptor(e))throw new TypeError("Desc must be a Property Descriptor");return!(!c(e,"[[Get]]")&&!c(e,"[[Set]]"))},IsDataDescriptor:function(e){if(void 0===e)return!1;if(!this.IsPropertyDescriptor(e))throw new TypeError("Desc must be a Property Descriptor");return!(!c(e,"[[Value]]")&&!c(e,"[[Writable]]"))},IsGenericDescriptor:function(e){if(void 0===e)return!1;if(!this.IsPropertyDescriptor(e))throw new TypeError("Desc must be a Property Descriptor");return!this.IsAccessorDescriptor(e)&&!this.IsDataDescriptor(e)},FromPropertyDescriptor:function(e){if(void 0===e)return e;if(!this.IsPropertyDescriptor(e))throw new TypeError("Desc must be a Property Descriptor");if(this.IsDataDescriptor(e))return{value:e["[[Value]]"],writable:!!e["[[Writable]]"],enumerable:!!e["[[Enumerable]]"],configurable:!!e["[[Configurable]]"]};if(this.IsAccessorDescriptor(e))return{get:e["[[Get]]"],set:e["[[Set]]"],enumerable:!!e["[[Enumerable]]"],configurable:!!e["[[Configurable]]"]};throw new TypeError("FromPropertyDescriptor must be called with a fully populated Property Descriptor")},ToPropertyDescriptor:function(e){if("Object"!==this.Type(e))throw new TypeError("ToPropertyDescriptor requires an object");var t={};if(c(e,"enumerable")&&(t["[[Enumerable]]"]=this.ToBoolean(e.enumerable)),c(e,"configurable")&&(t["[[Configurable]]"]=this.ToBoolean(e.configurable)),c(e,"value")&&(t["[[Value]]"]=e.value),c(e,"writable")&&(t["[[Writable]]"]=this.ToBoolean(e.writable)),c(e,"get")){var r=e.get;if(void 0!==r&&!this.IsCallable(r))throw new TypeError("getter must be a function");t["[[Get]]"]=r}if(c(e,"set")){var o=e.set;if(void 0!==o&&!this.IsCallable(o))throw new TypeError("setter must be a function");t["[[Set]]"]=o}if((c(t,"[[Get]]")||c(t,"[[Set]]"))&&(c(t,"[[Value]]")||c(t,"[[Writable]]")))throw new TypeError("Invalid property descriptor. Cannot both specify accessors and a value or writable attribute");return t}};t.exports=l},{"./helpers/isFinite":7,"./helpers/isNaN":8,"./helpers/mod":10,"./helpers/sign":11,"es-to-primitive/es5":12,has:18,"is-callable":19}],5:[function(e,t,r){"use strict";t.exports=e("./es2016")},{"./es2016":3}],6:[function(e,t,r){var o=Object.prototype.hasOwnProperty;t.exports=function(e,t){if(Object.assign)return Object.assign(e,t);for(var r in t)o.call(t,r)&&(e[r]=t[r]);return e}},{}],7:[function(e,t,r){var o=Number.isNaN||function(e){return e!=e};t.exports=Number.isFinite||function(e){return"number"==typeof e&&!o(e)&&e!==1/0&&e!==-1/0}},{}],8:[function(e,t,r){t.exports=Number.isNaN||function(e){return e!=e}},{}],9:[function(e,t,r){t.exports=function(e){return null===e||"function"!=typeof e&&"object"!=typeof e}},{}],10:[function(e,t,r){t.exports=function(e,t){var r=e%t;return Math.floor(r>=0?r:r+t)}},{}],11:[function(e,t,r){t.exports=function(e){return e>=0?1:-1}},{}],12:[function(e,t,r){"use strict";var o=Object.prototype.toString,n=e("./helpers/isPrimitive"),i=e("is-callable"),s=function(e,t){var r=t||("[object Date]"===o.call(e)?String:Number);if(r===String||r===Number){var s,a,u=r===String?["toString","valueOf"]:["valueOf","toString"];for(a=0;a<u.length;++a)if(i(e[u[a]])&&(s=e[u[a]](),n(s)))return s;throw new TypeError("No default value")}throw new TypeError("invalid [[DefaultValue]] hint supplied")};t.exports=function(e,t){return n(e)?e:s(e,t)}},{"./helpers/isPrimitive":14,"is-callable":19}],13:[function(e,t,r){"use strict";var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator,n=e("./helpers/isPrimitive"),i=e("is-callable"),s=e("is-date-object"),a=e("is-symbol");t.exports=function(e,t){if(n(e))return e;var r,u="default";if(arguments.length>1&&(t===String?u="string":t===Number&&(u="number")),o&&(Symbol.toPrimitive?r=function(e,t){var r=e[t];if(null!==r&&void 0!==r){if(!i(r))throw new TypeError(r+" returned for property "+t+" of object "+e+" is not a function");return r}}(e,Symbol.toPrimitive):a(e)&&(r=Symbol.prototype.valueOf)),void 0!==r){var c=r.call(e,u);if(n(c))return c;throw new TypeError("unable to convert exotic object to primitive")}return"default"===u&&(s(e)||a(e))&&(u="string"),function(e,t){if(void 0===e||null===e)throw new TypeError("Cannot call method on "+e);if("string"!=typeof t||"number"!==t&&"string"!==t)throw new TypeError('hint must be "string" or "number"');var r,o,s,a="string"===t?["toString","valueOf"]:["valueOf","toString"];for(s=0;s<a.length;++s)if(r=e[a[s]],i(r)&&(o=r.call(e),n(o)))return o;throw new TypeError("No default value")}(e,"default"===u?"number":u)}},{"./helpers/isPrimitive":14,"is-callable":19,"is-date-object":20,"is-symbol":22}],14:[function(e,t,r){arguments[4][9][0].apply(r,arguments)},{dup:9}],15:[function(e,t,r){var o=Object.prototype.hasOwnProperty,n=Object.prototype.toString;t.exports=function(e,t,r){if("[object Function]"!==n.call(t))throw new TypeError("iterator must be a function");var i=e.length;if(i===+i)for(var s=0;s<i;s++)t.call(r,e[s],s,e);else for(var a in e)o.call(e,a)&&t.call(r,e[a],a,e)}},{}],16:[function(e,t,r){"use strict";var o=Array.prototype.slice,n=Object.prototype.toString;t.exports=function(e){var t=this;if("function"!=typeof t||"[object Function]"!==n.call(t))throw new TypeError("Function.prototype.bind called on incompatible "+t);for(var r,i=o.call(arguments,1),s=Math.max(0,t.length-i.length),a=[],u=0;u<s;u++)a.push("$"+u);if(r=Function("binder","return function ("+a.join(",")+"){ return binder.apply(this,arguments); }")(function(){if(this instanceof r){var n=t.apply(this,i.concat(o.call(arguments)));return Object(n)===n?n:this}return t.apply(e,i.concat(o.call(arguments)))}),t.prototype){var c=function(){};c.prototype=t.prototype,r.prototype=new c,c.prototype=null}return r}},{}],17:[function(e,t,r){"use strict";var o=e("./implementation");t.exports=Function.prototype.bind||o},{"./implementation":16}],18:[function(e,t,r){var o=e("function-bind");t.exports=o.call(Function.call,Object.prototype.hasOwnProperty)},{"function-bind":17}],19:[function(e,t,r){"use strict";var o=Function.prototype.toString,n=/^\s*class /,i=function(e){try{var t=o.call(e).replace(/\/\/.*\n/g,"").replace(/\/\*[.\s\S]*\*\//g,"").replace(/\n/gm," ").replace(/ {2}/g," ");return n.test(t)}catch(e){return!1}},s=Object.prototype.toString,a="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;t.exports=function(e){if(!e)return!1;if("function"!=typeof e&&"object"!=typeof e)return!1;if(a)return function(e){try{return!i(e)&&(o.call(e),!0)}catch(e){return!1}}(e);if(i(e))return!1;var t=s.call(e);return"[object Function]"===t||"[object GeneratorFunction]"===t}},{}],20:[function(e,t,r){"use strict";var o=Date.prototype.getDay,n=Object.prototype.toString,i="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;t.exports=function(e){return"object"==typeof e&&null!==e&&(i?function(e){try{return o.call(e),!0}catch(e){return!1}}(e):"[object Date]"===n.call(e))}},{}],21:[function(e,t,r){"use strict";var o=e("has"),n=RegExp.prototype.exec,i=Object.getOwnPropertyDescriptor,s=Object.prototype.toString,a="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;t.exports=function(e){if(!e||"object"!=typeof e)return!1;if(!a)return"[object RegExp]"===s.call(e);var t=i(e,"lastIndex");return!(!t||!o(t,"value"))&&function(e){try{var t=e.lastIndex;return e.lastIndex=0,n.call(e),!0}catch(e){return!1}finally{e.lastIndex=t}}(e)}},{has:18}],22:[function(e,t,r){"use strict";var o=Object.prototype.toString;if("function"==typeof Symbol&&"symbol"==typeof Symbol()){var n=Symbol.prototype.toString,i=/^Symbol\(.*\)$/;t.exports=function(e){if("symbol"==typeof e)return!0;if("[object Symbol]"!==o.call(e))return!1;try{return"symbol"==typeof(t=e).valueOf()&&i.test(n.call(t))}catch(e){return!1}var t}}else t.exports=function(e){return!1}},{}],23:[function(e,t,r){"use strict";var o=Object.prototype.hasOwnProperty,n=Object.prototype.toString,i=Array.prototype.slice,s=e("./isArguments"),a=Object.prototype.propertyIsEnumerable,u=!a.call({toString:null},"toString"),c=a.call(function(){},"prototype"),l=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],p=function(e){var t=e.constructor;return t&&t.prototype===e},f={$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},y=function(){if("undefined"==typeof window)return!1;for(var e in window)try{if(!f["$"+e]&&o.call(window,e)&&null!==window[e]&&"object"==typeof window[e])try{p(window[e])}catch(e){return!0}}catch(e){return!0}return!1}(),b=function(e){var t=null!==e&&"object"==typeof e,r="[object Function]"===n.call(e),i=s(e),a=t&&"[object String]"===n.call(e),f=[];if(!t&&!r&&!i)throw new TypeError("Object.keys called on a non-object");var b=c&&r;if(a&&e.length>0&&!o.call(e,0))for(var h=0;h<e.length;++h)f.push(String(h));if(i&&e.length>0)for(var m=0;m<e.length;++m)f.push(String(m));else for(var v in e)b&&"prototype"===v||!o.call(e,v)||f.push(String(v));if(u)for(var d=function(e){if("undefined"==typeof window||!y)return p(e);try{return p(e)}catch(e){return!1}}(e),g=0;g<l.length;++g)d&&"constructor"===l[g]||!o.call(e,l[g])||f.push(l[g]);return f};b.shim=function(){if(Object.keys){if(!function(){return 2===(Object.keys(arguments)||"").length}(1,2)){var e=Object.keys;Object.keys=function(t){return s(t)?e(i.call(t)):e(t)}}}else Object.keys=b;return Object.keys||b},t.exports=b},{"./isArguments":24}],24:[function(e,t,r){"use strict";var o=Object.prototype.toString;t.exports=function(e){var t=o.call(e),r="[object Arguments]"===t;return r||(r="[object Array]"!==t&&null!==e&&"object"==typeof e&&"number"==typeof e.length&&e.length>=0&&"[object Function]"===o.call(e.callee)),r}},{}],25:[function(e,t,r){"use strict";var o=e("es-abstract/es7"),n=e("has"),i=e("function-bind").call(Function.call,Object.prototype.propertyIsEnumerable);t.exports=function(e){var t=o.RequireObjectCoercible(e),r=[];for(var s in t)n(t,s)&&i(t,s)&&r.push(t[s]);return r}},{"es-abstract/es7":5,"function-bind":17,has:18}],26:[function(e,t,r){"use strict";var o=e("define-properties"),n=e("./implementation"),i=e("./polyfill"),s=e("./shim"),a=i();o(a,{getPolyfill:i,implementation:n,shim:s}),t.exports=a},{"./implementation":25,"./polyfill":27,"./shim":28,"define-properties":1}],27:[function(e,t,r){"use strict";var o=e("./implementation");t.exports=function(){return"function"==typeof Object.values?Object.values:o}},{"./implementation":25}],28:[function(e,t,r){"use strict";var o=e("./polyfill"),n=e("define-properties");t.exports=function(){var e=o();return n(Object,{values:e},{values:function(){return Object.values!==e}}),e}},{"./polyfill":27,"define-properties":1}],29:[function(e,t,r){"use strict";var o={isMobile:!1,hasTouch:!1},n=e("./selectors"),i=n.MAIN_NAV,s=(n.BANNER,n.LOGO_WRAP,n.TROWEL_ICON);e("object.values");var a=e("./utils"),u=a.fixBanner,c=(a.expandNav,a.shrinkNav,a.toggleHeaderBgImg),l=a.setBgImgHeight,p=a.fadeOutLoadScreen;function f(){var e=window.innerWidth;o.isMobile=e<=414,o.hasTouch&&l(),e<1060&&$("header").css("z-index",""),u()}function y(){$(s).on("click",function(e){e.preventDefault(),function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1200,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;$("body, html").animate({scrollTop:$(e).offset().top-r},t)}("#overview")})}function b(){$(".burger-btn").on("click",function(e){e.preventDefault(),$(".burger-btn, .burger-icon, "+i).toggleClass("open")}),y()}var h=e("./slideshow").startSlideShow;function m(){f(),$(window).resize(f),$(window).scroll(function(e){"/"===location.pathname&&(c(),u())}),$(window).on("touchstart",function(e){o.hasTouch=!0,l(),$(window).off("touchstart")})}$(function(){m(),b(),"/"===location.pathname&&(c(),u()),o.hasTouch&&l(),p(),h(4e3)})},{"./selectors":30,"./slideshow":31,"./utils":32,"object.values":26}],30:[function(e,t,r){"use strict";t.exports={MAIN_NAV:".main-nav",BANNER:".banner",LOGO_WRAP:".logo-a-wrap",TROWEL_ICON:".icon-trowel-outline"}},{}],31:[function(e,t,r){"use strict";function o(){var e=$(".slide.current"),t=parseInt(e.attr("data-slide-num")),r=t<$(".slide").length?t+1:1;e.removeClass("current"),$('.slide[data-slide-num="'+r+'"]').addClass("current")}t.exports={nextSlide:o,startSlideShow:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:6e3;setInterval(function(){o()},e)}}},{}],32:[function(e,t,r){"use strict";var o=e("./selectors"),n=o.MAIN_NAV,i=o.BANNER,s=o.LOGO_WRAP,a=(o.TROWEL_ICON,function(){$(n).add(i).add("header").add(s).addClass("shrink")}),u=function(){$(n).add(i).add("header").add(s).removeClass("shrink")};t.exports={shrinkNav:a,expandNav:u,fixBanner:function(){var e=$(window).scrollTop();$(n).offset().top-e<=40?$(n).addClass("fixed"):$(n).removeClass("fixed");var t=$("header").height()-$(window).scrollTop();t<=0?a():t>0&&window.innerWidth<=899&&$("header").removeClass("shrink"),t>=100&&u()},toggleHeaderBgImg:function(){$(window).scrollTop()>2*$("header").height()?$("header").addClass("remove"):$("header").removeClass("remove")},setBgImgHeight:function(){var e=$("header");e.css("max-height","");var t=e.height();e.css("max-height",t)},fadeOutLoadScreen:function(){setTimeout(function(){$(".loading-page, .loading-page svg").addClass("fade-out"),setTimeout(function(){$("body").removeClass("no-scroll")},700),setTimeout(function(){$(".loading-page").remove()},2e3)},500)}}},{"./selectors":30}]},{},[29]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvZGVmaW5lLXByb3BlcnRpZXMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvZXMyMDE1LmpzIiwibm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2VzMjAxNi5qcyIsIm5vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC9lczUuanMiLCJub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvZXM3LmpzIiwibm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvYXNzaWduLmpzIiwibm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvaXNGaW5pdGUuanMiLCJub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvaGVscGVycy9pc05hTi5qcyIsIm5vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC9oZWxwZXJzL2lzUHJpbWl0aXZlLmpzIiwibm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvbW9kLmpzIiwibm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9lcy10by1wcmltaXRpdmUvZXM1LmpzIiwibm9kZV9tb2R1bGVzL2VzLXRvLXByaW1pdGl2ZS9lczYuanMiLCJub2RlX21vZHVsZXMvZm9yZWFjaC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9mdW5jdGlvbi1iaW5kL2ltcGxlbWVudGF0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2Z1bmN0aW9uLWJpbmQvaW5kZXguanMiLCJub2RlX21vZHVsZXMvaGFzL3NyYy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9pcy1jYWxsYWJsZS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9pcy1kYXRlLW9iamVjdC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9pcy1yZWdleC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9pcy1zeW1ib2wvaW5kZXguanMiLCJub2RlX21vZHVsZXMvb2JqZWN0LWtleXMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvb2JqZWN0LWtleXMvaXNBcmd1bWVudHMuanMiLCJub2RlX21vZHVsZXMvb2JqZWN0LnZhbHVlcy9pbXBsZW1lbnRhdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9vYmplY3QudmFsdWVzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL29iamVjdC52YWx1ZXMvcG9seWZpbGwuanMiLCJub2RlX21vZHVsZXMvb2JqZWN0LnZhbHVlcy9zaGltLmpzIiwic3JjL2J1aWxkL2pzL2FwcC5qcyIsInNyYy9idWlsZC9qcy9zZWxlY3RvcnMuanMiLCJzcmMvYnVpbGQvanMvc2xpZGVzaG93LmpzIiwic3JjL2J1aWxkL2pzL3V0aWxzLmpzIl0sIm5hbWVzIjpbImUiLCJ0IiwibiIsInIiLCJzIiwibyIsInUiLCJhIiwicmVxdWlyZSIsImkiLCJmIiwiRXJyb3IiLCJjb2RlIiwibCIsImV4cG9ydHMiLCJjYWxsIiwibGVuZ3RoIiwiMSIsIm1vZHVsZSIsImtleXMiLCJmb3JlYWNoIiwiaGFzU3ltYm9scyIsIlN5bWJvbCIsInRvU3RyIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJzdXBwb3J0c0Rlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydHkiLCJvYmoiLCJlbnVtZXJhYmxlIiwidmFsdWUiLCJfIiwieCIsImFyZVByb3BlcnR5RGVzY3JpcHRvcnNTdXBwb3J0ZWQiLCJvYmplY3QiLCJuYW1lIiwicHJlZGljYXRlIiwiZm4iLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImRlZmluZVByb3BlcnRpZXMiLCJtYXAiLCJwcmVkaWNhdGVzIiwiYXJndW1lbnRzIiwicHJvcHMiLCJjb25jYXQiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJoYXMiLCJ0b1ByaW1pdGl2ZSIsIml0ZXJhdG9yIiwiJGlzTmFOIiwiJGlzRmluaXRlIiwiTUFYX1NBRkVfSU5URUdFUiIsIk51bWJlciIsIk1hdGgiLCJwb3ciLCJhc3NpZ24iLCJzaWduIiwibW9kIiwiaXNQcmltaXRpdmUiLCJwYXJzZUludGVnZXIiLCJwYXJzZUludCIsImJpbmQiLCJhcnJheVNsaWNlIiwiRnVuY3Rpb24iLCJBcnJheSIsInNsaWNlIiwic3RyU2xpY2UiLCJTdHJpbmciLCJpc0JpbmFyeSIsIlJlZ0V4cCIsInRlc3QiLCJpc09jdGFsIiwicmVnZXhFeGVjIiwiZXhlYyIsIm5vbldTIiwiam9pbiIsIm5vbldTcmVnZXgiLCJoYXNOb25XUyIsImlzSW52YWxpZEhleExpdGVyYWwiLCJ3cyIsInRyaW1SZWdleCIsInJlcGxhY2UiLCJFUzUiLCJoYXNSZWdFeHBNYXRjaGVyIiwiRVM2IiwiQ2FsbCIsIkYiLCJWIiwiYXJncyIsInRoaXMiLCJJc0NhbGxhYmxlIiwiVHlwZUVycm9yIiwiYXBwbHkiLCJUb1ByaW1pdGl2ZSIsIlRvTnVtYmVyIiwiYXJndW1lbnQiLCJOYU4iLCJ0cmltbWVkIiwiVG9JbnQxNiIsImludDE2Yml0IiwiVG9VaW50MTYiLCJUb0ludDgiLCJpbnQ4Yml0IiwiVG9VaW50OCIsIm51bWJlciIsInBvc0ludCIsImZsb29yIiwiYWJzIiwiVG9VaW50OENsYW1wIiwiVG9TdHJpbmciLCJUb09iamVjdCIsIlJlcXVpcmVPYmplY3RDb2VyY2libGUiLCJUb1Byb3BlcnR5S2V5Iiwia2V5IiwiVG9MZW5ndGgiLCJsZW4iLCJUb0ludGVnZXIiLCJDYW5vbmljYWxOdW1lcmljSW5kZXhTdHJpbmciLCJTYW1lVmFsdWUiLCJDaGVja09iamVjdENvZXJjaWJsZSIsIklzQXJyYXkiLCJpc0FycmF5IiwiSXNDb25zdHJ1Y3RvciIsIklzRXh0ZW5zaWJsZSIsInByZXZlbnRFeHRlbnNpb25zIiwiaXNFeHRlbnNpYmxlIiwiSXNJbnRlZ2VyIiwiSXNQcm9wZXJ0eUtleSIsIklzUmVnRXhwIiwiaXNSZWdFeHAiLCJtYXRjaCIsIlRvQm9vbGVhbiIsIlNhbWVWYWx1ZVplcm8iLCJ5IiwiR2V0ViIsIlAiLCJHZXRNZXRob2QiLCJPIiwiZnVuYyIsIkdldCIsIlR5cGUiLCJTcGVjaWVzQ29uc3RydWN0b3IiLCJkZWZhdWx0Q29uc3RydWN0b3IiLCJDIiwiY29uc3RydWN0b3IiLCJTIiwic3BlY2llcyIsIkNvbXBsZXRlUHJvcGVydHlEZXNjcmlwdG9yIiwiRGVzYyIsIklzUHJvcGVydHlEZXNjcmlwdG9yIiwiSXNHZW5lcmljRGVzY3JpcHRvciIsIklzRGF0YURlc2NyaXB0b3IiLCJTZXQiLCJUaHJvdyIsIkhhc093blByb3BlcnR5IiwiSGFzUHJvcGVydHkiLCJJc0NvbmNhdFNwcmVhZGFibGUiLCJpc0NvbmNhdFNwcmVhZGFibGUiLCJzcHJlYWRhYmxlIiwiSW52b2tlIiwiYXJndW1lbnRzTGlzdCIsIkNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QiLCJkb25lIiwiUmVnRXhwRXhlYyIsIlIiLCJyZXN1bHQiLCJBcnJheVNwZWNpZXNDcmVhdGUiLCJvcmlnaW5hbEFycmF5IiwiQ3JlYXRlRGF0YVByb3BlcnR5Iiwib2xkRGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImV4dGVuc2libGUiLCJuZXdEZXNjIiwiQ3JlYXRlRGF0YVByb3BlcnR5T3JUaHJvdyIsInN1Y2Nlc3MiLCJBZHZhbmNlU3RyaW5nSW5kZXgiLCJpbmRleCIsInVuaWNvZGUiLCJSYW5nZUVycm9yIiwiZmlyc3QiLCJjaGFyQ29kZUF0Iiwic2Vjb25kIiwiRVMyMDE1IiwiRVMyMDE2IiwiU2FtZVZhbHVlTm9uTnVtYmVyIiwiVG9JbnQzMiIsIlRvVWludDMyIiwib3B0TWVzc2FnZSIsImFsbG93ZWQiLCJbW0NvbmZpZ3VyYWJsZV1dIiwiW1tFbnVtZXJhYmxlXV0iLCJbW0dldF1dIiwiW1tTZXRdXSIsIltbVmFsdWVdXSIsIltbV3JpdGFibGVdXSIsImlzRGF0YSIsIklzQWNjZXNzb3IiLCJJc0FjY2Vzc29yRGVzY3JpcHRvciIsIkZyb21Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXQiLCJzZXQiLCJUb1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iaiIsImRlc2MiLCJnZXR0ZXIiLCJzZXR0ZXIiLCJoYXNPd25Qcm9wZXJ0eSIsInRhcmdldCIsInNvdXJjZSIsImlzTmFOIiwiaXNGaW5pdGUiLCJJbmZpbml0eSIsIm1vZHVsbyIsInJlbWFpbiIsImlzQ2FsbGFibGUiLCJFUzVpbnRlcm5hbFNsb3RzIiwiaGludCIsImFjdHVhbEhpbnQiLCJtZXRob2RzIiwiaW5wdXQiLCJQcmVmZXJyZWRUeXBlIiwiaXNEYXRlIiwiaXNTeW1ib2wiLCJleG90aWNUb1ByaW0iLCJ2YWx1ZU9mIiwibWV0aG9kIiwibWV0aG9kTmFtZXMiLCJvcmRpbmFyeVRvUHJpbWl0aXZlIiwiaGFzT3duIiwiY3R4IiwiayIsInRoYXQiLCJib3VuZCIsImJvdW5kTGVuZ3RoIiwibWF4IiwiYm91bmRBcmdzIiwicHVzaCIsIkVtcHR5IiwiaW1wbGVtZW50YXRpb24iLCJmblRvU3RyIiwiY29uc3RydWN0b3JSZWdleCIsImlzRVM2Q2xhc3NGbiIsInNwYWNlU3RyaXBwZWQiLCJoYXNUb1N0cmluZ1RhZyIsInRvU3RyaW5nVGFnIiwidHJ5RnVuY3Rpb25PYmplY3QiLCJzdHJDbGFzcyIsImdldERheSIsIkRhdGUiLCJ0cnlEYXRlT2JqZWN0IiwiZ09QRCIsImRlc2NyaXB0b3IiLCJsYXN0SW5kZXgiLCJ0cnlSZWdleEV4ZWNDYWxsIiwic3ltVG9TdHIiLCJzeW1TdHJpbmdSZWdleCIsImlzQXJncyIsImlzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiaGFzRG9udEVudW1CdWciLCJoYXNQcm90b0VudW1CdWciLCJkb250RW51bXMiLCJlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZSIsImN0b3IiLCJleGNsdWRlZEtleXMiLCIkY29uc29sZSIsIiRleHRlcm5hbCIsIiRmcmFtZSIsIiRmcmFtZUVsZW1lbnQiLCIkZnJhbWVzIiwiJGlubmVySGVpZ2h0IiwiJGlubmVyV2lkdGgiLCIkb3V0ZXJIZWlnaHQiLCIkb3V0ZXJXaWR0aCIsIiRwYWdlWE9mZnNldCIsIiRwYWdlWU9mZnNldCIsIiRwYXJlbnQiLCIkc2Nyb2xsTGVmdCIsIiRzY3JvbGxUb3AiLCIkc2Nyb2xsWCIsIiRzY3JvbGxZIiwiJHNlbGYiLCIkd2Via2l0SW5kZXhlZERCIiwiJHdlYmtpdFN0b3JhZ2VJbmZvIiwiJHdpbmRvdyIsImhhc0F1dG9tYXRpb25FcXVhbGl0eUJ1ZyIsIndpbmRvdyIsImtleXNTaGltIiwiaXNPYmplY3QiLCJpc0Z1bmN0aW9uIiwiaXNBcmd1bWVudHMiLCJpc1N0cmluZyIsInRoZUtleXMiLCJza2lwUHJvdG8iLCJqIiwic2tpcENvbnN0cnVjdG9yIiwiZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGVJZk5vdEJ1Z2d5Iiwic2hpbSIsIm9yaWdpbmFsS2V5cyIsInN0ciIsImNhbGxlZSIsIkVTIiwidmFscyIsImRlZmluZSIsImdldFBvbHlmaWxsIiwicG9seWZpbGwiLCJ2YWx1ZXMiLCJzdGF0ZSIsImlzTW9iaWxlIiwiaGFzVG91Y2giLCJNQUlOX05BViIsIlRST1dFTF9JQ09OIiwiQkFOTkVSIiwiTE9HT19XUkFQIiwiZml4QmFubmVyIiwidG9nZ2xlSGVhZGVyQmdJbWciLCJleHBhbmROYXYiLCJzaHJpbmtOYXYiLCJzZXRCZ0ltZ0hlaWdodCIsImZhZGVPdXRMb2FkU2NyZWVuIiwiY2hlY2tTaXplIiwid2lkdGgiLCJpbm5lcldpZHRoIiwiJCIsImNzcyIsInRyb3dlbENsaWNrIiwib24iLCJwcmV2ZW50RGVmYXVsdCIsImR1cmF0aW9uIiwidW5kZWZpbmVkIiwib2Zmc2V0IiwiYW5pbWF0ZSIsInNjcm9sbFRvcCIsInRvcCIsInNtb290aFNjcm9sbCIsIm5hdkNsaWNrcyIsInRvZ2dsZUNsYXNzIiwic3RhcnRTbGlkZVNob3ciLCJ1dGlscyIsInJlc2l6ZSIsInNjcm9sbCIsImxvY2F0aW9uIiwicGF0aG5hbWUiLCJvZmYiLCJuZXh0U2xpZGUiLCIkY3VycmVudCIsInNsaWRlTnVtIiwiYXR0ciIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJkZWxheSIsInNldEludGVydmFsIiwiYWRkIiwid2luVG9Ub3BEb2MiLCJoZWlnaHQiLCIkYmciLCJo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QUNWVCxFQUFFYixHQUFVb0IsU0FBU0csSUFFUG9CLEdBQ2QsR0FFZDlCLEVBQUViLEdBQVV1QyxTQUFTLFNBRXJCMUIsRUFBRWIsR0FBVXNDLFlBQVksU0FHNUIsSUFBSWxCLEVBQVNQLEVBQUUsVUFBVStCLFNBQVcvQixFQUFFckMsUUFBUThDLFlBRTNDRixHQUFVLEVBQ1RiLElBQ01hLEVBQVMsR0FBSzVDLE9BQU9vQyxZQUFjLEtBQ3pDQyxFQUFFLFVBQVV5QixZQUFZLFVBRXpCbEIsR0FBVSxLQUNUZCxLQXNFSkQsa0JBNUNKLFdBQ21CUSxFQUFFckMsUUFBUThDLFlBRUEsRUFEVlQsRUFBRSxVQUFVK0IsU0FFdkIvQixFQUFFLFVBQVUwQixTQUFTLFVBRXJCMUIsRUFBRSxVQUFVeUIsWUFBWSxXQXVDNUI5QixlQTlCbUIsV0FHbkIsSUFBSXFDLEVBQU1oQyxFQUFFLFVBQ1pnQyxFQUFJL0IsSUFBSSxhQUFjLElBQ3RCLElBQUlnQyxFQUFJRCxFQUFJRCxTQUNaQyxFQUFJL0IsSUFBSSxhQUFjZ0MsSUF5QnRCckMsa0JBbkJKLFdBQ0lzQyxXQUFXLFdBQ1BsQyxFQUFFLG9DQUFvQzBCLFNBQVMsWUFDL0NRLFdBQVcsV0FDUGxDLEVBQUUsUUFBUXlCLFlBQVksY0FDdkIsS0FDSFMsV0FBVyxXQUNQbEMsRUFBRSxpQkFBaUJtQyxVQUNwQixNQUNKIiwiZmlsZSI6ImJ1bmRsZS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIid1c2Ugc3RyaWN0JztcblxudmFyIGtleXMgPSByZXF1aXJlKCdvYmplY3Qta2V5cycpO1xudmFyIGZvcmVhY2ggPSByZXF1aXJlKCdmb3JlYWNoJyk7XG52YXIgaGFzU3ltYm9scyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbCgpID09PSAnc3ltYm9sJztcblxudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiAoZm4pIHtcblx0cmV0dXJuIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJyAmJiB0b1N0ci5jYWxsKGZuKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn07XG5cbnZhciBhcmVQcm9wZXJ0eURlc2NyaXB0b3JzU3VwcG9ydGVkID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgb2JqID0ge307XG5cdHRyeSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgJ3gnLCB7IGVudW1lcmFibGU6IGZhbHNlLCB2YWx1ZTogb2JqIH0pO1xuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycywgbm8tcmVzdHJpY3RlZC1zeW50YXggKi9cbiAgICAgICAgZm9yICh2YXIgXyBpbiBvYmopIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMsIG5vLXJlc3RyaWN0ZWQtc3ludGF4ICovXG5cdFx0cmV0dXJuIG9iai54ID09PSBvYmo7XG5cdH0gY2F0Y2ggKGUpIHsgLyogdGhpcyBpcyBJRSA4LiAqL1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcbnZhciBzdXBwb3J0c0Rlc2NyaXB0b3JzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIGFyZVByb3BlcnR5RGVzY3JpcHRvcnNTdXBwb3J0ZWQoKTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZSwgdmFsdWUsIHByZWRpY2F0ZSkge1xuXHRpZiAobmFtZSBpbiBvYmplY3QgJiYgKCFpc0Z1bmN0aW9uKHByZWRpY2F0ZSkgfHwgIXByZWRpY2F0ZSgpKSkge1xuXHRcdHJldHVybjtcblx0fVxuXHRpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIG5hbWUsIHtcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0d3JpdGFibGU6IHRydWVcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHRvYmplY3RbbmFtZV0gPSB2YWx1ZTtcblx0fVxufTtcblxudmFyIGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiAob2JqZWN0LCBtYXApIHtcblx0dmFyIHByZWRpY2F0ZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXHR2YXIgcHJvcHMgPSBrZXlzKG1hcCk7XG5cdGlmIChoYXNTeW1ib2xzKSB7XG5cdFx0cHJvcHMgPSBwcm9wcy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhtYXApKTtcblx0fVxuXHRmb3JlYWNoKHByb3BzLCBmdW5jdGlvbiAobmFtZSkge1xuXHRcdGRlZmluZVByb3BlcnR5KG9iamVjdCwgbmFtZSwgbWFwW25hbWVdLCBwcmVkaWNhdGVzW25hbWVdKTtcblx0fSk7XG59O1xuXG5kZWZpbmVQcm9wZXJ0aWVzLnN1cHBvcnRzRGVzY3JpcHRvcnMgPSAhIXN1cHBvcnRzRGVzY3JpcHRvcnM7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lUHJvcGVydGllcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhcyA9IHJlcXVpcmUoJ2hhcycpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnZXMtdG8tcHJpbWl0aXZlL2VzNicpO1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGhhc1N5bWJvbHMgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICdzeW1ib2wnO1xuXG52YXIgJGlzTmFOID0gcmVxdWlyZSgnLi9oZWxwZXJzL2lzTmFOJyk7XG52YXIgJGlzRmluaXRlID0gcmVxdWlyZSgnLi9oZWxwZXJzL2lzRmluaXRlJyk7XG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSIHx8IE1hdGgucG93KDIsIDUzKSAtIDE7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL2hlbHBlcnMvYXNzaWduJyk7XG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vaGVscGVycy9zaWduJyk7XG52YXIgbW9kID0gcmVxdWlyZSgnLi9oZWxwZXJzL21vZCcpO1xudmFyIGlzUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9oZWxwZXJzL2lzUHJpbWl0aXZlJyk7XG52YXIgcGFyc2VJbnRlZ2VyID0gcGFyc2VJbnQ7XG52YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcbnZhciBhcnJheVNsaWNlID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIEFycmF5LnByb3RvdHlwZS5zbGljZSk7XG52YXIgc3RyU2xpY2UgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgU3RyaW5nLnByb3RvdHlwZS5zbGljZSk7XG52YXIgaXNCaW5hcnkgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgUmVnRXhwLnByb3RvdHlwZS50ZXN0LCAvXjBiWzAxXSskL2kpO1xudmFyIGlzT2N0YWwgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgUmVnRXhwLnByb3RvdHlwZS50ZXN0LCAvXjBvWzAtN10rJC9pKTtcbnZhciByZWdleEV4ZWMgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgUmVnRXhwLnByb3RvdHlwZS5leGVjKTtcbnZhciBub25XUyA9IFsnXFx1MDA4NScsICdcXHUyMDBiJywgJ1xcdWZmZmUnXS5qb2luKCcnKTtcbnZhciBub25XU3JlZ2V4ID0gbmV3IFJlZ0V4cCgnWycgKyBub25XUyArICddJywgJ2cnKTtcbnZhciBoYXNOb25XUyA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBSZWdFeHAucHJvdG90eXBlLnRlc3QsIG5vbldTcmVnZXgpO1xudmFyIGludmFsaWRIZXhMaXRlcmFsID0gL15bLStdMHhbMC05YS1mXSskL2k7XG52YXIgaXNJbnZhbGlkSGV4TGl0ZXJhbCA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBSZWdFeHAucHJvdG90eXBlLnRlc3QsIGludmFsaWRIZXhMaXRlcmFsKTtcblxuLy8gd2hpdGVzcGFjZSBmcm9tOiBodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjUuNC4yMFxuLy8gaW1wbGVtZW50YXRpb24gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vYmxvYi92My40LjAvZXM1LXNoaW0uanMjTDEzMDQtTDEzMjRcbnZhciB3cyA9IFtcblx0J1xceDA5XFx4MEFcXHgwQlxceDBDXFx4MERcXHgyMFxceEEwXFx1MTY4MFxcdTE4MEVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzJyxcblx0J1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHUyMDI4Jyxcblx0J1xcdTIwMjlcXHVGRUZGJ1xuXS5qb2luKCcnKTtcbnZhciB0cmltUmVnZXggPSBuZXcgUmVnRXhwKCcoXlsnICsgd3MgKyAnXSspfChbJyArIHdzICsgJ10rJCknLCAnZycpO1xudmFyIHJlcGxhY2UgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKTtcbnZhciB0cmltID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdHJldHVybiByZXBsYWNlKHZhbHVlLCB0cmltUmVnZXgsICcnKTtcbn07XG5cbnZhciBFUzUgPSByZXF1aXJlKCcuL2VzNScpO1xuXG52YXIgaGFzUmVnRXhwTWF0Y2hlciA9IHJlcXVpcmUoJ2lzLXJlZ2V4Jyk7XG5cbi8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1hYnN0cmFjdC1vcGVyYXRpb25zXG52YXIgRVM2ID0gYXNzaWduKGFzc2lnbih7fSwgRVM1KSwge1xuXG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1jYWxsLWYtdi1hcmdzXG5cdENhbGw6IGZ1bmN0aW9uIENhbGwoRiwgVikge1xuXHRcdHZhciBhcmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiBbXTtcblx0XHRpZiAoIXRoaXMuSXNDYWxsYWJsZShGKSkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihGICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuXHRcdH1cblx0XHRyZXR1cm4gRi5hcHBseShWLCBhcmdzKTtcblx0fSxcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtdG9wcmltaXRpdmVcblx0VG9QcmltaXRpdmU6IHRvUHJpbWl0aXZlLFxuXG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy10b2Jvb2xlYW5cblx0Ly8gVG9Cb29sZWFuOiBFUzUuVG9Cb29sZWFuLFxuXG5cdC8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10b251bWJlclxuXHRUb051bWJlcjogZnVuY3Rpb24gVG9OdW1iZXIoYXJndW1lbnQpIHtcblx0XHR2YXIgdmFsdWUgPSBpc1ByaW1pdGl2ZShhcmd1bWVudCkgPyBhcmd1bWVudCA6IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCBOdW1iZXIpO1xuXHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICdzeW1ib2wnKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBhIFN5bWJvbCB2YWx1ZSB0byBhIG51bWJlcicpO1xuXHRcdH1cblx0XHRpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuXHRcdFx0aWYgKGlzQmluYXJ5KHZhbHVlKSkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5Ub051bWJlcihwYXJzZUludGVnZXIoc3RyU2xpY2UodmFsdWUsIDIpLCAyKSk7XG5cdFx0XHR9IGVsc2UgaWYgKGlzT2N0YWwodmFsdWUpKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLlRvTnVtYmVyKHBhcnNlSW50ZWdlcihzdHJTbGljZSh2YWx1ZSwgMiksIDgpKTtcblx0XHRcdH0gZWxzZSBpZiAoaGFzTm9uV1ModmFsdWUpIHx8IGlzSW52YWxpZEhleExpdGVyYWwodmFsdWUpKSB7XG5cdFx0XHRcdHJldHVybiBOYU47XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YXIgdHJpbW1lZCA9IHRyaW0odmFsdWUpO1xuXHRcdFx0XHRpZiAodHJpbW1lZCAhPT0gdmFsdWUpIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5Ub051bWJlcih0cmltbWVkKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gTnVtYmVyKHZhbHVlKTtcblx0fSxcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtdG9pbnRlZ2VyXG5cdC8vIFRvSW50ZWdlcjogRVM1LlRvTnVtYmVyLFxuXG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy10b2ludDMyXG5cdC8vIFRvSW50MzI6IEVTNS5Ub0ludDMyLFxuXG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy10b3VpbnQzMlxuXHQvLyBUb1VpbnQzMjogRVM1LlRvVWludDMyLFxuXG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy10b2ludDE2XG5cdFRvSW50MTY6IGZ1bmN0aW9uIFRvSW50MTYoYXJndW1lbnQpIHtcblx0XHR2YXIgaW50MTZiaXQgPSB0aGlzLlRvVWludDE2KGFyZ3VtZW50KTtcblx0XHRyZXR1cm4gaW50MTZiaXQgPj0gMHg4MDAwID8gaW50MTZiaXQgLSAweDEwMDAwIDogaW50MTZiaXQ7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLXRvdWludDE2XG5cdC8vIFRvVWludDE2OiBFUzUuVG9VaW50MTYsXG5cblx0Ly8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLXRvaW50OFxuXHRUb0ludDg6IGZ1bmN0aW9uIFRvSW50OChhcmd1bWVudCkge1xuXHRcdHZhciBpbnQ4Yml0ID0gdGhpcy5Ub1VpbnQ4KGFyZ3VtZW50KTtcblx0XHRyZXR1cm4gaW50OGJpdCA+PSAweDgwID8gaW50OGJpdCAtIDB4MTAwIDogaW50OGJpdDtcblx0fSxcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtdG91aW50OFxuXHRUb1VpbnQ4OiBmdW5jdGlvbiBUb1VpbnQ4KGFyZ3VtZW50KSB7XG5cdFx0dmFyIG51bWJlciA9IHRoaXMuVG9OdW1iZXIoYXJndW1lbnQpO1xuXHRcdGlmICgkaXNOYU4obnVtYmVyKSB8fCBudW1iZXIgPT09IDAgfHwgISRpc0Zpbml0ZShudW1iZXIpKSB7IHJldHVybiAwOyB9XG5cdFx0dmFyIHBvc0ludCA9IHNpZ24obnVtYmVyKSAqIE1hdGguZmxvb3IoTWF0aC5hYnMobnVtYmVyKSk7XG5cdFx0cmV0dXJuIG1vZChwb3NJbnQsIDB4MTAwKTtcblx0fSxcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtdG91aW50OGNsYW1wXG5cdFRvVWludDhDbGFtcDogZnVuY3Rpb24gVG9VaW50OENsYW1wKGFyZ3VtZW50KSB7XG5cdFx0dmFyIG51bWJlciA9IHRoaXMuVG9OdW1iZXIoYXJndW1lbnQpO1xuXHRcdGlmICgkaXNOYU4obnVtYmVyKSB8fCBudW1iZXIgPD0gMCkgeyByZXR1cm4gMDsgfVxuXHRcdGlmIChudW1iZXIgPj0gMHhGRikgeyByZXR1cm4gMHhGRjsgfVxuXHRcdHZhciBmID0gTWF0aC5mbG9vcihhcmd1bWVudCk7XG5cdFx0aWYgKGYgKyAwLjUgPCBudW1iZXIpIHsgcmV0dXJuIGYgKyAxOyB9XG5cdFx0aWYgKG51bWJlciA8IGYgKyAwLjUpIHsgcmV0dXJuIGY7IH1cblx0XHRpZiAoZiAlIDIgIT09IDApIHsgcmV0dXJuIGYgKyAxOyB9XG5cdFx0cmV0dXJuIGY7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLXRvc3RyaW5nXG5cdFRvU3RyaW5nOiBmdW5jdGlvbiBUb1N0cmluZyhhcmd1bWVudCkge1xuXHRcdGlmICh0eXBlb2YgYXJndW1lbnQgPT09ICdzeW1ib2wnKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBhIFN5bWJvbCB2YWx1ZSB0byBhIHN0cmluZycpO1xuXHRcdH1cblx0XHRyZXR1cm4gU3RyaW5nKGFyZ3VtZW50KTtcblx0fSxcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtdG9vYmplY3Rcblx0VG9PYmplY3Q6IGZ1bmN0aW9uIFRvT2JqZWN0KHZhbHVlKSB7XG5cdFx0dGhpcy5SZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHZhbHVlKTtcblx0XHRyZXR1cm4gT2JqZWN0KHZhbHVlKTtcblx0fSxcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtdG9wcm9wZXJ0eWtleVxuXHRUb1Byb3BlcnR5S2V5OiBmdW5jdGlvbiBUb1Byb3BlcnR5S2V5KGFyZ3VtZW50KSB7XG5cdFx0dmFyIGtleSA9IHRoaXMuVG9QcmltaXRpdmUoYXJndW1lbnQsIFN0cmluZyk7XG5cdFx0cmV0dXJuIHR5cGVvZiBrZXkgPT09ICdzeW1ib2wnID8ga2V5IDogdGhpcy5Ub1N0cmluZyhrZXkpO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy10b2xlbmd0aFxuXHRUb0xlbmd0aDogZnVuY3Rpb24gVG9MZW5ndGgoYXJndW1lbnQpIHtcblx0XHR2YXIgbGVuID0gdGhpcy5Ub0ludGVnZXIoYXJndW1lbnQpO1xuXHRcdGlmIChsZW4gPD0gMCkgeyByZXR1cm4gMDsgfSAvLyBpbmNsdWRlcyBjb252ZXJ0aW5nIC0wIHRvICswXG5cdFx0aWYgKGxlbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHsgcmV0dXJuIE1BWF9TQUZFX0lOVEVHRVI7IH1cblx0XHRyZXR1cm4gbGVuO1xuXHR9LFxuXG5cdC8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1jYW5vbmljYWxudW1lcmljaW5kZXhzdHJpbmdcblx0Q2Fub25pY2FsTnVtZXJpY0luZGV4U3RyaW5nOiBmdW5jdGlvbiBDYW5vbmljYWxOdW1lcmljSW5kZXhTdHJpbmcoYXJndW1lbnQpIHtcblx0XHRpZiAodG9TdHIuY2FsbChhcmd1bWVudCkgIT09ICdbb2JqZWN0IFN0cmluZ10nKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdtdXN0IGJlIGEgc3RyaW5nJyk7XG5cdFx0fVxuXHRcdGlmIChhcmd1bWVudCA9PT0gJy0wJykgeyByZXR1cm4gLTA7IH1cblx0XHR2YXIgbiA9IHRoaXMuVG9OdW1iZXIoYXJndW1lbnQpO1xuXHRcdGlmICh0aGlzLlNhbWVWYWx1ZSh0aGlzLlRvU3RyaW5nKG4pLCBhcmd1bWVudCkpIHsgcmV0dXJuIG47IH1cblx0XHRyZXR1cm4gdm9pZCAwO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1yZXF1aXJlb2JqZWN0Y29lcmNpYmxlXG5cdFJlcXVpcmVPYmplY3RDb2VyY2libGU6IEVTNS5DaGVja09iamVjdENvZXJjaWJsZSxcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtaXNhcnJheVxuXHRJc0FycmF5OiBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIElzQXJyYXkoYXJndW1lbnQpIHtcblx0XHRyZXR1cm4gdG9TdHIuY2FsbChhcmd1bWVudCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWlzY2FsbGFibGVcblx0Ly8gSXNDYWxsYWJsZTogRVM1LklzQ2FsbGFibGUsXG5cblx0Ly8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWlzY29uc3RydWN0b3Jcblx0SXNDb25zdHJ1Y3RvcjogZnVuY3Rpb24gSXNDb25zdHJ1Y3Rvcihhcmd1bWVudCkge1xuXHRcdHJldHVybiB0eXBlb2YgYXJndW1lbnQgPT09ICdmdW5jdGlvbicgJiYgISFhcmd1bWVudC5wcm90b3R5cGU7IC8vIHVuZm9ydHVuYXRlbHkgdGhlcmUncyBubyB3YXkgdG8gdHJ1bHkgY2hlY2sgdGhpcyB3aXRob3V0IHRyeS9jYXRjaCBgbmV3IGFyZ3VtZW50YFxuXHR9LFxuXG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1pc2V4dGVuc2libGUtb1xuXHRJc0V4dGVuc2libGU6IGZ1bmN0aW9uIElzRXh0ZW5zaWJsZShvYmopIHtcblx0XHRpZiAoIU9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucykgeyByZXR1cm4gdHJ1ZTsgfVxuXHRcdGlmIChpc1ByaW1pdGl2ZShvYmopKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiBPYmplY3QuaXNFeHRlbnNpYmxlKG9iaik7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWlzaW50ZWdlclxuXHRJc0ludGVnZXI6IGZ1bmN0aW9uIElzSW50ZWdlcihhcmd1bWVudCkge1xuXHRcdGlmICh0eXBlb2YgYXJndW1lbnQgIT09ICdudW1iZXInIHx8ICRpc05hTihhcmd1bWVudCkgfHwgISRpc0Zpbml0ZShhcmd1bWVudCkpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0dmFyIGFicyA9IE1hdGguYWJzKGFyZ3VtZW50KTtcblx0XHRyZXR1cm4gTWF0aC5mbG9vcihhYnMpID09PSBhYnM7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWlzcHJvcGVydHlrZXlcblx0SXNQcm9wZXJ0eUtleTogZnVuY3Rpb24gSXNQcm9wZXJ0eUtleShhcmd1bWVudCkge1xuXHRcdHJldHVybiB0eXBlb2YgYXJndW1lbnQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBhcmd1bWVudCA9PT0gJ3N5bWJvbCc7XG5cdH0sXG5cblx0Ly8gaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWlzcmVnZXhwXG5cdElzUmVnRXhwOiBmdW5jdGlvbiBJc1JlZ0V4cChhcmd1bWVudCkge1xuXHRcdGlmICghYXJndW1lbnQgfHwgdHlwZW9mIGFyZ3VtZW50ICE9PSAnb2JqZWN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRpZiAoaGFzU3ltYm9scykge1xuXHRcdFx0dmFyIGlzUmVnRXhwID0gYXJndW1lbnRbU3ltYm9sLm1hdGNoXTtcblx0XHRcdGlmICh0eXBlb2YgaXNSZWdFeHAgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdHJldHVybiBFUzUuVG9Cb29sZWFuKGlzUmVnRXhwKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGhhc1JlZ0V4cE1hdGNoZXIoYXJndW1lbnQpO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1zYW1ldmFsdWVcblx0Ly8gU2FtZVZhbHVlOiBFUzUuU2FtZVZhbHVlLFxuXG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1zYW1ldmFsdWV6ZXJvXG5cdFNhbWVWYWx1ZVplcm86IGZ1bmN0aW9uIFNhbWVWYWx1ZVplcm8oeCwgeSkge1xuXHRcdHJldHVybiAoeCA9PT0geSkgfHwgKCRpc05hTih4KSAmJiAkaXNOYU4oeSkpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiA3LjMuMiBHZXRWIChWLCBQKVxuXHQgKiAxLiBBc3NlcnQ6IElzUHJvcGVydHlLZXkoUCkgaXMgdHJ1ZS5cblx0ICogMi4gTGV0IE8gYmUgVG9PYmplY3QoVikuXG5cdCAqIDMuIFJldHVybklmQWJydXB0KE8pLlxuXHQgKiA0LiBSZXR1cm4gTy5bW0dldF1dKFAsIFYpLlxuXHQgKi9cblx0R2V0VjogZnVuY3Rpb24gR2V0VihWLCBQKSB7XG5cdFx0Ly8gNy4zLjIuMVxuXHRcdGlmICghdGhpcy5Jc1Byb3BlcnR5S2V5KFApKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBJc1Byb3BlcnR5S2V5KFApIGlzIG5vdCB0cnVlJyk7XG5cdFx0fVxuXG5cdFx0Ly8gNy4zLjIuMi0zXG5cdFx0dmFyIE8gPSB0aGlzLlRvT2JqZWN0KFYpO1xuXG5cdFx0Ly8gNy4zLjIuNFxuXHRcdHJldHVybiBPW1BdO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiA3LjMuOSAtIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1nZXRtZXRob2Rcblx0ICogMS4gQXNzZXJ0OiBJc1Byb3BlcnR5S2V5KFApIGlzIHRydWUuXG5cdCAqIDIuIExldCBmdW5jIGJlIEdldFYoTywgUCkuXG5cdCAqIDMuIFJldHVybklmQWJydXB0KGZ1bmMpLlxuXHQgKiA0LiBJZiBmdW5jIGlzIGVpdGhlciB1bmRlZmluZWQgb3IgbnVsbCwgcmV0dXJuIHVuZGVmaW5lZC5cblx0ICogNS4gSWYgSXNDYWxsYWJsZShmdW5jKSBpcyBmYWxzZSwgdGhyb3cgYSBUeXBlRXJyb3IgZXhjZXB0aW9uLlxuXHQgKiA2LiBSZXR1cm4gZnVuYy5cblx0ICovXG5cdEdldE1ldGhvZDogZnVuY3Rpb24gR2V0TWV0aG9kKE8sIFApIHtcblx0XHQvLyA3LjMuOS4xXG5cdFx0aWYgKCF0aGlzLklzUHJvcGVydHlLZXkoUCkpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IElzUHJvcGVydHlLZXkoUCkgaXMgbm90IHRydWUnKTtcblx0XHR9XG5cblx0XHQvLyA3LjMuOS4yXG5cdFx0dmFyIGZ1bmMgPSB0aGlzLkdldFYoTywgUCk7XG5cblx0XHQvLyA3LjMuOS40XG5cdFx0aWYgKGZ1bmMgPT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIHZvaWQgMDtcblx0XHR9XG5cblx0XHQvLyA3LjMuOS41XG5cdFx0aWYgKCF0aGlzLklzQ2FsbGFibGUoZnVuYykpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoUCArICdpcyBub3QgYSBmdW5jdGlvbicpO1xuXHRcdH1cblxuXHRcdC8vIDcuMy45LjZcblx0XHRyZXR1cm4gZnVuYztcblx0fSxcblxuXHQvKipcblx0ICogNy4zLjEgR2V0IChPLCBQKSAtIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1nZXQtby1wXG5cdCAqIDEuIEFzc2VydDogVHlwZShPKSBpcyBPYmplY3QuXG5cdCAqIDIuIEFzc2VydDogSXNQcm9wZXJ0eUtleShQKSBpcyB0cnVlLlxuXHQgKiAzLiBSZXR1cm4gTy5bW0dldF1dKFAsIE8pLlxuXHQgKi9cblx0R2V0OiBmdW5jdGlvbiBHZXQoTywgUCkge1xuXHRcdC8vIDcuMy4xLjFcblx0XHRpZiAodGhpcy5UeXBlKE8pICE9PSAnT2JqZWN0Jykge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogVHlwZShPKSBpcyBub3QgT2JqZWN0Jyk7XG5cdFx0fVxuXHRcdC8vIDcuMy4xLjJcblx0XHRpZiAoIXRoaXMuSXNQcm9wZXJ0eUtleShQKSkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogSXNQcm9wZXJ0eUtleShQKSBpcyBub3QgdHJ1ZScpO1xuXHRcdH1cblx0XHQvLyA3LjMuMS4zXG5cdFx0cmV0dXJuIE9bUF07XG5cdH0sXG5cblx0VHlwZTogZnVuY3Rpb24gVHlwZSh4KSB7XG5cdFx0aWYgKHR5cGVvZiB4ID09PSAnc3ltYm9sJykge1xuXHRcdFx0cmV0dXJuICdTeW1ib2wnO1xuXHRcdH1cblx0XHRyZXR1cm4gRVM1LlR5cGUoeCk7XG5cdH0sXG5cblx0Ly8gaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXNwZWNpZXNjb25zdHJ1Y3RvclxuXHRTcGVjaWVzQ29uc3RydWN0b3I6IGZ1bmN0aW9uIFNwZWNpZXNDb25zdHJ1Y3RvcihPLCBkZWZhdWx0Q29uc3RydWN0b3IpIHtcblx0XHRpZiAodGhpcy5UeXBlKE8pICE9PSAnT2JqZWN0Jykge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogVHlwZShPKSBpcyBub3QgT2JqZWN0Jyk7XG5cdFx0fVxuXHRcdHZhciBDID0gTy5jb25zdHJ1Y3Rvcjtcblx0XHRpZiAodHlwZW9mIEMgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRyZXR1cm4gZGVmYXVsdENvbnN0cnVjdG9yO1xuXHRcdH1cblx0XHRpZiAodGhpcy5UeXBlKEMpICE9PSAnT2JqZWN0Jykge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignTy5jb25zdHJ1Y3RvciBpcyBub3QgYW4gT2JqZWN0Jyk7XG5cdFx0fVxuXHRcdHZhciBTID0gaGFzU3ltYm9scyAmJiBTeW1ib2wuc3BlY2llcyA/IENbU3ltYm9sLnNwZWNpZXNdIDogdm9pZCAwO1xuXHRcdGlmIChTID09IG51bGwpIHtcblx0XHRcdHJldHVybiBkZWZhdWx0Q29uc3RydWN0b3I7XG5cdFx0fVxuXHRcdGlmICh0aGlzLklzQ29uc3RydWN0b3IoUykpIHtcblx0XHRcdHJldHVybiBTO1xuXHRcdH1cblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdubyBjb25zdHJ1Y3RvciBmb3VuZCcpO1xuXHR9LFxuXG5cdC8vIGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWNvbXBsZXRlcHJvcGVydHlkZXNjcmlwdG9yXG5cdENvbXBsZXRlUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBDb21wbGV0ZVByb3BlcnR5RGVzY3JpcHRvcihEZXNjKSB7XG5cdFx0aWYgKCF0aGlzLklzUHJvcGVydHlEZXNjcmlwdG9yKERlc2MpKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdEZXNjIG11c3QgYmUgYSBQcm9wZXJ0eSBEZXNjcmlwdG9yJyk7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuSXNHZW5lcmljRGVzY3JpcHRvcihEZXNjKSB8fCB0aGlzLklzRGF0YURlc2NyaXB0b3IoRGVzYykpIHtcblx0XHRcdGlmICghaGFzKERlc2MsICdbW1ZhbHVlXV0nKSkge1xuXHRcdFx0XHREZXNjWydbW1ZhbHVlXV0nXSA9IHZvaWQgMDtcblx0XHRcdH1cblx0XHRcdGlmICghaGFzKERlc2MsICdbW1dyaXRhYmxlXV0nKSkge1xuXHRcdFx0XHREZXNjWydbW1dyaXRhYmxlXV0nXSA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIWhhcyhEZXNjLCAnW1tHZXRdXScpKSB7XG5cdFx0XHRcdERlc2NbJ1tbR2V0XV0nXSA9IHZvaWQgMDtcblx0XHRcdH1cblx0XHRcdGlmICghaGFzKERlc2MsICdbW1NldF1dJykpIHtcblx0XHRcdFx0RGVzY1snW1tTZXRdXSddID0gdm9pZCAwO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoIWhhcyhEZXNjLCAnW1tFbnVtZXJhYmxlXV0nKSkge1xuXHRcdFx0RGVzY1snW1tFbnVtZXJhYmxlXV0nXSA9IGZhbHNlO1xuXHRcdH1cblx0XHRpZiAoIWhhcyhEZXNjLCAnW1tDb25maWd1cmFibGVdXScpKSB7XG5cdFx0XHREZXNjWydbW0NvbmZpZ3VyYWJsZV1dJ10gPSBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIERlc2M7XG5cdH0sXG5cblx0Ly8gaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtc2V0LW8tcC12LXRocm93XG5cdFNldDogZnVuY3Rpb24gU2V0KE8sIFAsIFYsIFRocm93KSB7XG5cdFx0aWYgKHRoaXMuVHlwZShPKSAhPT0gJ09iamVjdCcpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ08gbXVzdCBiZSBhbiBPYmplY3QnKTtcblx0XHR9XG5cdFx0aWYgKCF0aGlzLklzUHJvcGVydHlLZXkoUCkpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ1AgbXVzdCBiZSBhIFByb3BlcnR5IEtleScpO1xuXHRcdH1cblx0XHRpZiAodGhpcy5UeXBlKFRocm93KSAhPT0gJ0Jvb2xlYW4nKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdUaHJvdyBtdXN0IGJlIGEgQm9vbGVhbicpO1xuXHRcdH1cblx0XHRpZiAoVGhyb3cpIHtcblx0XHRcdE9bUF0gPSBWO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdE9bUF0gPSBWO1xuXHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWhhc293bnByb3BlcnR5XG5cdEhhc093blByb3BlcnR5OiBmdW5jdGlvbiBIYXNPd25Qcm9wZXJ0eShPLCBQKSB7XG5cdFx0aWYgKHRoaXMuVHlwZShPKSAhPT0gJ09iamVjdCcpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ08gbXVzdCBiZSBhbiBPYmplY3QnKTtcblx0XHR9XG5cdFx0aWYgKCF0aGlzLklzUHJvcGVydHlLZXkoUCkpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ1AgbXVzdCBiZSBhIFByb3BlcnR5IEtleScpO1xuXHRcdH1cblx0XHRyZXR1cm4gaGFzKE8sIFApO1xuXHR9LFxuXG5cdC8vIGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWhhc3Byb3BlcnR5XG5cdEhhc1Byb3BlcnR5OiBmdW5jdGlvbiBIYXNQcm9wZXJ0eShPLCBQKSB7XG5cdFx0aWYgKHRoaXMuVHlwZShPKSAhPT0gJ09iamVjdCcpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ08gbXVzdCBiZSBhbiBPYmplY3QnKTtcblx0XHR9XG5cdFx0aWYgKCF0aGlzLklzUHJvcGVydHlLZXkoUCkpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ1AgbXVzdCBiZSBhIFByb3BlcnR5IEtleScpO1xuXHRcdH1cblx0XHRyZXR1cm4gUCBpbiBPO1xuXHR9LFxuXG5cdC8vIGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWlzY29uY2F0c3ByZWFkYWJsZVxuXHRJc0NvbmNhdFNwcmVhZGFibGU6IGZ1bmN0aW9uIElzQ29uY2F0U3ByZWFkYWJsZShPKSB7XG5cdFx0aWYgKHRoaXMuVHlwZShPKSAhPT0gJ09iamVjdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0aWYgKGhhc1N5bWJvbHMgJiYgdHlwZW9mIFN5bWJvbC5pc0NvbmNhdFNwcmVhZGFibGUgPT09ICdzeW1ib2wnKSB7XG5cdFx0XHR2YXIgc3ByZWFkYWJsZSA9IHRoaXMuR2V0KE8sIFN5bWJvbC5pc0NvbmNhdFNwcmVhZGFibGUpO1xuXHRcdFx0aWYgKHR5cGVvZiBzcHJlYWRhYmxlICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5Ub0Jvb2xlYW4oc3ByZWFkYWJsZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLklzQXJyYXkoTyk7XG5cdH0sXG5cblx0Ly8gaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtaW52b2tlXG5cdEludm9rZTogZnVuY3Rpb24gSW52b2tlKE8sIFApIHtcblx0XHRpZiAoIXRoaXMuSXNQcm9wZXJ0eUtleShQKSkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignUCBtdXN0IGJlIGEgUHJvcGVydHkgS2V5Jyk7XG5cdFx0fVxuXHRcdHZhciBhcmd1bWVudHNMaXN0ID0gYXJyYXlTbGljZShhcmd1bWVudHMsIDIpO1xuXHRcdHZhciBmdW5jID0gdGhpcy5HZXRWKE8sIFApO1xuXHRcdHJldHVybiB0aGlzLkNhbGwoZnVuYywgTywgYXJndW1lbnRzTGlzdCk7XG5cdH0sXG5cblx0Ly8gaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtY3JlYXRlaXRlcnJlc3VsdG9iamVjdFxuXHRDcmVhdGVJdGVyUmVzdWx0T2JqZWN0OiBmdW5jdGlvbiBDcmVhdGVJdGVyUmVzdWx0T2JqZWN0KHZhbHVlLCBkb25lKSB7XG5cdFx0aWYgKHRoaXMuVHlwZShkb25lKSAhPT0gJ0Jvb2xlYW4nKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBUeXBlKGRvbmUpIGlzIG5vdCBCb29sZWFuJyk7XG5cdFx0fVxuXHRcdHJldHVybiB7XG5cdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRkb25lOiBkb25lXG5cdFx0fTtcblx0fSxcblxuXHQvLyBodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1yZWdleHBleGVjXG5cdFJlZ0V4cEV4ZWM6IGZ1bmN0aW9uIFJlZ0V4cEV4ZWMoUiwgUykge1xuXHRcdGlmICh0aGlzLlR5cGUoUikgIT09ICdPYmplY3QnKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdSIG11c3QgYmUgYW4gT2JqZWN0Jyk7XG5cdFx0fVxuXHRcdGlmICh0aGlzLlR5cGUoUykgIT09ICdTdHJpbmcnKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdTIG11c3QgYmUgYSBTdHJpbmcnKTtcblx0XHR9XG5cdFx0dmFyIGV4ZWMgPSB0aGlzLkdldChSLCAnZXhlYycpO1xuXHRcdGlmICh0aGlzLklzQ2FsbGFibGUoZXhlYykpIHtcblx0XHRcdHZhciByZXN1bHQgPSB0aGlzLkNhbGwoZXhlYywgUiwgW1NdKTtcblx0XHRcdGlmIChyZXN1bHQgPT09IG51bGwgfHwgdGhpcy5UeXBlKHJlc3VsdCkgPT09ICdPYmplY3QnKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHR9XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdcImV4ZWNcIiBtZXRob2QgbXVzdCByZXR1cm4gYG51bGxgIG9yIGFuIE9iamVjdCcpO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVnZXhFeGVjKFIsIFMpO1xuXHR9LFxuXG5cdC8vIGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWFycmF5c3BlY2llc2NyZWF0ZVxuXHRBcnJheVNwZWNpZXNDcmVhdGU6IGZ1bmN0aW9uIEFycmF5U3BlY2llc0NyZWF0ZShvcmlnaW5hbEFycmF5LCBsZW5ndGgpIHtcblx0XHRpZiAoIXRoaXMuSXNJbnRlZ2VyKGxlbmd0aCkgfHwgbGVuZ3RoIDwgMCkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogbGVuZ3RoIG11c3QgYmUgYW4gaW50ZWdlciA+PSAwJyk7XG5cdFx0fVxuXHRcdHZhciBsZW4gPSBsZW5ndGggPT09IDAgPyAwIDogbGVuZ3RoO1xuXHRcdHZhciBDO1xuXHRcdHZhciBpc0FycmF5ID0gdGhpcy5Jc0FycmF5KG9yaWdpbmFsQXJyYXkpO1xuXHRcdGlmIChpc0FycmF5KSB7XG5cdFx0XHRDID0gdGhpcy5HZXQob3JpZ2luYWxBcnJheSwgJ2NvbnN0cnVjdG9yJyk7XG5cdFx0XHQvLyBUT0RPOiBmaWd1cmUgb3V0IGhvdyB0byBtYWtlIGEgY3Jvc3MtcmVhbG0gbm9ybWFsIEFycmF5LCBhIHNhbWUtcmVhbG0gQXJyYXlcblx0XHRcdC8vIGlmICh0aGlzLklzQ29uc3RydWN0b3IoQykpIHtcblx0XHRcdC8vIFx0aWYgQyBpcyBhbm90aGVyIHJlYWxtJ3MgQXJyYXksIEMgPSB1bmRlZmluZWRcblx0XHRcdC8vIFx0T2JqZWN0LmdldFByb3RvdHlwZU9mKE9iamVjdC5nZXRQcm90b3R5cGVPZihPYmplY3QuZ2V0UHJvdG90eXBlT2YoQXJyYXkpKSkgPT09IG51bGwgP1xuXHRcdFx0Ly8gfVxuXHRcdFx0aWYgKHRoaXMuVHlwZShDKSA9PT0gJ09iamVjdCcgJiYgaGFzU3ltYm9scyAmJiBTeW1ib2wuc3BlY2llcykge1xuXHRcdFx0XHRDID0gdGhpcy5HZXQoQywgU3ltYm9sLnNwZWNpZXMpO1xuXHRcdFx0XHRpZiAoQyA9PT0gbnVsbCkge1xuXHRcdFx0XHRcdEMgPSB2b2lkIDA7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKHR5cGVvZiBDID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0cmV0dXJuIEFycmF5KGxlbik7XG5cdFx0fVxuXHRcdGlmICghdGhpcy5Jc0NvbnN0cnVjdG9yKEMpKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdDIG11c3QgYmUgYSBjb25zdHJ1Y3RvcicpO1xuXHRcdH1cblx0XHRyZXR1cm4gbmV3IEMobGVuKTsgLy8gdGhpcy5Db25zdHJ1Y3QoQywgbGVuKTtcblx0fSxcblxuXHRDcmVhdGVEYXRhUHJvcGVydHk6IGZ1bmN0aW9uIENyZWF0ZURhdGFQcm9wZXJ0eShPLCBQLCBWKSB7XG5cdFx0aWYgKHRoaXMuVHlwZShPKSAhPT0gJ09iamVjdCcpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IFR5cGUoTykgaXMgbm90IE9iamVjdCcpO1xuXHRcdH1cblx0XHRpZiAoIXRoaXMuSXNQcm9wZXJ0eUtleShQKSkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogSXNQcm9wZXJ0eUtleShQKSBpcyBub3QgdHJ1ZScpO1xuXHRcdH1cblx0XHR2YXIgb2xkRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7XG5cdFx0dmFyIGV4dGVuc2libGUgPSBvbGREZXNjIHx8ICh0eXBlb2YgT2JqZWN0LmlzRXh0ZW5zaWJsZSAhPT0gJ2Z1bmN0aW9uJyB8fCBPYmplY3QuaXNFeHRlbnNpYmxlKE8pKTtcblx0XHR2YXIgaW1tdXRhYmxlID0gb2xkRGVzYyAmJiAoIW9sZERlc2Mud3JpdGFibGUgfHwgIW9sZERlc2MuY29uZmlndXJhYmxlKTtcblx0XHRpZiAoaW1tdXRhYmxlIHx8ICFleHRlbnNpYmxlKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHZhciBuZXdEZXNjID0ge1xuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdHZhbHVlOiBWLFxuXHRcdFx0d3JpdGFibGU6IHRydWVcblx0XHR9O1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBuZXdEZXNjKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHQvLyBodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1jcmVhdGVkYXRhcHJvcGVydHlvcnRocm93XG5cdENyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3c6IGZ1bmN0aW9uIENyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3coTywgUCwgVikge1xuXHRcdGlmICh0aGlzLlR5cGUoTykgIT09ICdPYmplY3QnKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBUeXBlKE8pIGlzIG5vdCBPYmplY3QnKTtcblx0XHR9XG5cdFx0aWYgKCF0aGlzLklzUHJvcGVydHlLZXkoUCkpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IElzUHJvcGVydHlLZXkoUCkgaXMgbm90IHRydWUnKTtcblx0XHR9XG5cdFx0dmFyIHN1Y2Nlc3MgPSB0aGlzLkNyZWF0ZURhdGFQcm9wZXJ0eShPLCBQLCBWKTtcblx0XHRpZiAoIXN1Y2Nlc3MpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ3VuYWJsZSB0byBjcmVhdGUgZGF0YSBwcm9wZXJ0eScpO1xuXHRcdH1cblx0XHRyZXR1cm4gc3VjY2Vzcztcblx0fSxcblxuXHQvLyBodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcblx0QWR2YW5jZVN0cmluZ0luZGV4OiBmdW5jdGlvbiBBZHZhbmNlU3RyaW5nSW5kZXgoUywgaW5kZXgsIHVuaWNvZGUpIHtcblx0XHRpZiAodGhpcy5UeXBlKFMpICE9PSAnU3RyaW5nJykge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogVHlwZShTKSBpcyBub3QgU3RyaW5nJyk7XG5cdFx0fVxuXHRcdGlmICghdGhpcy5Jc0ludGVnZXIoaW5kZXgpKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBsZW5ndGggbXVzdCBiZSBhbiBpbnRlZ2VyID49IDAgYW5kIDw9ICgyKio1MyAtIDEpJyk7XG5cdFx0fVxuXHRcdGlmIChpbmRleCA8IDAgfHwgaW5kZXggPiBNQVhfU0FGRV9JTlRFR0VSKSB7XG5cdFx0XHR0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogbGVuZ3RoIG11c3QgYmUgYW4gaW50ZWdlciA+PSAwIGFuZCA8PSAoMioqNTMgLSAxKScpO1xuXHRcdH1cblx0XHRpZiAodGhpcy5UeXBlKHVuaWNvZGUpICE9PSAnQm9vbGVhbicpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IFR5cGUodW5pY29kZSkgaXMgbm90IEJvb2xlYW4nKTtcblx0XHR9XG5cdFx0aWYgKCF1bmljb2RlKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXggKyAxO1xuXHRcdH1cblx0XHR2YXIgbGVuZ3RoID0gUy5sZW5ndGg7XG5cdFx0aWYgKChpbmRleCArIDEpID49IGxlbmd0aCkge1xuXHRcdFx0cmV0dXJuIGluZGV4ICsgMTtcblx0XHR9XG5cdFx0dmFyIGZpcnN0ID0gUy5jaGFyQ29kZUF0KGluZGV4KTtcblx0XHRpZiAoZmlyc3QgPCAweEQ4MDAgfHwgZmlyc3QgPiAweERCRkYpIHtcblx0XHRcdHJldHVybiBpbmRleCArIDE7XG5cdFx0fVxuXHRcdHZhciBzZWNvbmQgPSBTLmNoYXJDb2RlQXQoaW5kZXggKyAxKTtcblx0XHRpZiAoc2Vjb25kIDwgMHhEQzAwIHx8IHNlY29uZCA+IDB4REZGRikge1xuXHRcdFx0cmV0dXJuIGluZGV4ICsgMTtcblx0XHR9XG5cdFx0cmV0dXJuIGluZGV4ICsgMjtcblx0fVxufSk7XG5cbmRlbGV0ZSBFUzYuQ2hlY2tPYmplY3RDb2VyY2libGU7IC8vIHJlbmFtZWQgaW4gRVM2IHRvIFJlcXVpcmVPYmplY3RDb2VyY2libGVcblxubW9kdWxlLmV4cG9ydHMgPSBFUzY7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBFUzIwMTUgPSByZXF1aXJlKCcuL2VzMjAxNScpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vaGVscGVycy9hc3NpZ24nKTtcblxudmFyIEVTMjAxNiA9IGFzc2lnbihhc3NpZ24oe30sIEVTMjAxNSksIHtcblx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvZWNtYTI2Mi9wdWxsLzYwXG5cdFNhbWVWYWx1ZU5vbk51bWJlcjogZnVuY3Rpb24gU2FtZVZhbHVlTm9uTnVtYmVyKHgsIHkpIHtcblx0XHRpZiAodHlwZW9mIHggPT09ICdudW1iZXInIHx8IHR5cGVvZiB4ICE9PSB0eXBlb2YgeSkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignU2FtZVZhbHVlTm9uTnVtYmVyIHJlcXVpcmVzIHR3byBub24tbnVtYmVyIHZhbHVlcyBvZiB0aGUgc2FtZSB0eXBlLicpO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5TYW1lVmFsdWUoeCwgeSk7XG5cdH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVTMjAxNjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyICRpc05hTiA9IHJlcXVpcmUoJy4vaGVscGVycy9pc05hTicpO1xudmFyICRpc0Zpbml0ZSA9IHJlcXVpcmUoJy4vaGVscGVycy9pc0Zpbml0ZScpO1xuXG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vaGVscGVycy9zaWduJyk7XG52YXIgbW9kID0gcmVxdWlyZSgnLi9oZWxwZXJzL21vZCcpO1xuXG52YXIgSXNDYWxsYWJsZSA9IHJlcXVpcmUoJ2lzLWNhbGxhYmxlJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCdlcy10by1wcmltaXRpdmUvZXM1Jyk7XG5cbnZhciBoYXMgPSByZXF1aXJlKCdoYXMnKTtcblxuLy8gaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4OVxudmFyIEVTNSA9IHtcblx0VG9QcmltaXRpdmU6IHRvUHJpbWl0aXZlLFxuXG5cdFRvQm9vbGVhbjogZnVuY3Rpb24gVG9Cb29sZWFuKHZhbHVlKSB7XG5cdFx0cmV0dXJuICEhdmFsdWU7XG5cdH0sXG5cdFRvTnVtYmVyOiBmdW5jdGlvbiBUb051bWJlcih2YWx1ZSkge1xuXHRcdHJldHVybiBOdW1iZXIodmFsdWUpO1xuXHR9LFxuXHRUb0ludGVnZXI6IGZ1bmN0aW9uIFRvSW50ZWdlcih2YWx1ZSkge1xuXHRcdHZhciBudW1iZXIgPSB0aGlzLlRvTnVtYmVyKHZhbHVlKTtcblx0XHRpZiAoJGlzTmFOKG51bWJlcikpIHsgcmV0dXJuIDA7IH1cblx0XHRpZiAobnVtYmVyID09PSAwIHx8ICEkaXNGaW5pdGUobnVtYmVyKSkgeyByZXR1cm4gbnVtYmVyOyB9XG5cdFx0cmV0dXJuIHNpZ24obnVtYmVyKSAqIE1hdGguZmxvb3IoTWF0aC5hYnMobnVtYmVyKSk7XG5cdH0sXG5cdFRvSW50MzI6IGZ1bmN0aW9uIFRvSW50MzIoeCkge1xuXHRcdHJldHVybiB0aGlzLlRvTnVtYmVyKHgpID4+IDA7XG5cdH0sXG5cdFRvVWludDMyOiBmdW5jdGlvbiBUb1VpbnQzMih4KSB7XG5cdFx0cmV0dXJuIHRoaXMuVG9OdW1iZXIoeCkgPj4+IDA7XG5cdH0sXG5cdFRvVWludDE2OiBmdW5jdGlvbiBUb1VpbnQxNih2YWx1ZSkge1xuXHRcdHZhciBudW1iZXIgPSB0aGlzLlRvTnVtYmVyKHZhbHVlKTtcblx0XHRpZiAoJGlzTmFOKG51bWJlcikgfHwgbnVtYmVyID09PSAwIHx8ICEkaXNGaW5pdGUobnVtYmVyKSkgeyByZXR1cm4gMDsgfVxuXHRcdHZhciBwb3NJbnQgPSBzaWduKG51bWJlcikgKiBNYXRoLmZsb29yKE1hdGguYWJzKG51bWJlcikpO1xuXHRcdHJldHVybiBtb2QocG9zSW50LCAweDEwMDAwKTtcblx0fSxcblx0VG9TdHJpbmc6IGZ1bmN0aW9uIFRvU3RyaW5nKHZhbHVlKSB7XG5cdFx0cmV0dXJuIFN0cmluZyh2YWx1ZSk7XG5cdH0sXG5cdFRvT2JqZWN0OiBmdW5jdGlvbiBUb09iamVjdCh2YWx1ZSkge1xuXHRcdHRoaXMuQ2hlY2tPYmplY3RDb2VyY2libGUodmFsdWUpO1xuXHRcdHJldHVybiBPYmplY3QodmFsdWUpO1xuXHR9LFxuXHRDaGVja09iamVjdENvZXJjaWJsZTogZnVuY3Rpb24gQ2hlY2tPYmplY3RDb2VyY2libGUodmFsdWUsIG9wdE1lc3NhZ2UpIHtcblx0XHQvKiBqc2hpbnQgZXFudWxsOnRydWUgKi9cblx0XHRpZiAodmFsdWUgPT0gbnVsbCkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihvcHRNZXNzYWdlIHx8ICdDYW5ub3QgY2FsbCBtZXRob2Qgb24gJyArIHZhbHVlKTtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRJc0NhbGxhYmxlOiBJc0NhbGxhYmxlLFxuXHRTYW1lVmFsdWU6IGZ1bmN0aW9uIFNhbWVWYWx1ZSh4LCB5KSB7XG5cdFx0aWYgKHggPT09IHkpIHsgLy8gMCA9PT0gLTAsIGJ1dCB0aGV5IGFyZSBub3QgaWRlbnRpY2FsLlxuXHRcdFx0aWYgKHggPT09IDApIHsgcmV0dXJuIDEgLyB4ID09PSAxIC8geTsgfVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAkaXNOYU4oeCkgJiYgJGlzTmFOKHkpO1xuXHR9LFxuXG5cdC8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy04XG5cdFR5cGU6IGZ1bmN0aW9uIFR5cGUoeCkge1xuXHRcdGlmICh4ID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gJ051bGwnO1xuXHRcdH1cblx0XHRpZiAodHlwZW9mIHggPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRyZXR1cm4gJ1VuZGVmaW5lZCc7XG5cdFx0fVxuXHRcdGlmICh0eXBlb2YgeCA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgeCA9PT0gJ29iamVjdCcpIHtcblx0XHRcdHJldHVybiAnT2JqZWN0Jztcblx0XHR9XG5cdFx0aWYgKHR5cGVvZiB4ID09PSAnbnVtYmVyJykge1xuXHRcdFx0cmV0dXJuICdOdW1iZXInO1xuXHRcdH1cblx0XHRpZiAodHlwZW9mIHggPT09ICdib29sZWFuJykge1xuXHRcdFx0cmV0dXJuICdCb29sZWFuJztcblx0XHR9XG5cdFx0aWYgKHR5cGVvZiB4ID09PSAnc3RyaW5nJykge1xuXHRcdFx0cmV0dXJuICdTdHJpbmcnO1xuXHRcdH1cblx0fSxcblxuXHQvLyBodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1wcm9wZXJ0eS1kZXNjcmlwdG9yLXNwZWNpZmljYXRpb24tdHlwZVxuXHRJc1Byb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gSXNQcm9wZXJ0eURlc2NyaXB0b3IoRGVzYykge1xuXHRcdGlmICh0aGlzLlR5cGUoRGVzYykgIT09ICdPYmplY3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHZhciBhbGxvd2VkID0ge1xuXHRcdFx0J1tbQ29uZmlndXJhYmxlXV0nOiB0cnVlLFxuXHRcdFx0J1tbRW51bWVyYWJsZV1dJzogdHJ1ZSxcblx0XHRcdCdbW0dldF1dJzogdHJ1ZSxcblx0XHRcdCdbW1NldF1dJzogdHJ1ZSxcblx0XHRcdCdbW1ZhbHVlXV0nOiB0cnVlLFxuXHRcdFx0J1tbV3JpdGFibGVdXSc6IHRydWVcblx0XHR9O1xuXHRcdC8vIGpzY3M6ZGlzYWJsZVxuXHRcdGZvciAodmFyIGtleSBpbiBEZXNjKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblx0XHRcdGlmIChoYXMoRGVzYywga2V5KSAmJiAhYWxsb3dlZFtrZXldKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0Ly8ganNjczplbmFibGVcblx0XHR2YXIgaXNEYXRhID0gaGFzKERlc2MsICdbW1ZhbHVlXV0nKTtcblx0XHR2YXIgSXNBY2Nlc3NvciA9IGhhcyhEZXNjLCAnW1tHZXRdXScpIHx8IGhhcyhEZXNjLCAnW1tTZXRdXScpO1xuXHRcdGlmIChpc0RhdGEgJiYgSXNBY2Nlc3Nvcikge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignUHJvcGVydHkgRGVzY3JpcHRvcnMgbWF5IG5vdCBiZSBib3RoIGFjY2Vzc29yIGFuZCBkYXRhIGRlc2NyaXB0b3JzJyk7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdC8vIGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTguMTAuMVxuXHRJc0FjY2Vzc29yRGVzY3JpcHRvcjogZnVuY3Rpb24gSXNBY2Nlc3NvckRlc2NyaXB0b3IoRGVzYykge1xuXHRcdGlmICh0eXBlb2YgRGVzYyA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRpZiAoIXRoaXMuSXNQcm9wZXJ0eURlc2NyaXB0b3IoRGVzYykpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0Rlc2MgbXVzdCBiZSBhIFByb3BlcnR5IERlc2NyaXB0b3InKTtcblx0XHR9XG5cblx0XHRpZiAoIWhhcyhEZXNjLCAnW1tHZXRdXScpICYmICFoYXMoRGVzYywgJ1tbU2V0XV0nKSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdC8vIGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTguMTAuMlxuXHRJc0RhdGFEZXNjcmlwdG9yOiBmdW5jdGlvbiBJc0RhdGFEZXNjcmlwdG9yKERlc2MpIHtcblx0XHRpZiAodHlwZW9mIERlc2MgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aWYgKCF0aGlzLklzUHJvcGVydHlEZXNjcmlwdG9yKERlc2MpKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdEZXNjIG11c3QgYmUgYSBQcm9wZXJ0eSBEZXNjcmlwdG9yJyk7XG5cdFx0fVxuXG5cdFx0aWYgKCFoYXMoRGVzYywgJ1tbVmFsdWVdXScpICYmICFoYXMoRGVzYywgJ1tbV3JpdGFibGVdXScpKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Ly8gaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNS4xLyNzZWMtOC4xMC4zXG5cdElzR2VuZXJpY0Rlc2NyaXB0b3I6IGZ1bmN0aW9uIElzR2VuZXJpY0Rlc2NyaXB0b3IoRGVzYykge1xuXHRcdGlmICh0eXBlb2YgRGVzYyA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRpZiAoIXRoaXMuSXNQcm9wZXJ0eURlc2NyaXB0b3IoRGVzYykpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0Rlc2MgbXVzdCBiZSBhIFByb3BlcnR5IERlc2NyaXB0b3InKTtcblx0XHR9XG5cblx0XHRpZiAoIXRoaXMuSXNBY2Nlc3NvckRlc2NyaXB0b3IoRGVzYykgJiYgIXRoaXMuSXNEYXRhRGVzY3JpcHRvcihEZXNjKSkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9LFxuXG5cdC8vIGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTguMTAuNFxuXHRGcm9tUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBGcm9tUHJvcGVydHlEZXNjcmlwdG9yKERlc2MpIHtcblx0XHRpZiAodHlwZW9mIERlc2MgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRyZXR1cm4gRGVzYztcblx0XHR9XG5cblx0XHRpZiAoIXRoaXMuSXNQcm9wZXJ0eURlc2NyaXB0b3IoRGVzYykpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0Rlc2MgbXVzdCBiZSBhIFByb3BlcnR5IERlc2NyaXB0b3InKTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5Jc0RhdGFEZXNjcmlwdG9yKERlc2MpKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR2YWx1ZTogRGVzY1snW1tWYWx1ZV1dJ10sXG5cdFx0XHRcdHdyaXRhYmxlOiAhIURlc2NbJ1tbV3JpdGFibGVdXSddLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiAhIURlc2NbJ1tbRW51bWVyYWJsZV1dJ10sXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogISFEZXNjWydbW0NvbmZpZ3VyYWJsZV1dJ11cblx0XHRcdH07XG5cdFx0fSBlbHNlIGlmICh0aGlzLklzQWNjZXNzb3JEZXNjcmlwdG9yKERlc2MpKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRnZXQ6IERlc2NbJ1tbR2V0XV0nXSxcblx0XHRcdFx0c2V0OiBEZXNjWydbW1NldF1dJ10sXG5cdFx0XHRcdGVudW1lcmFibGU6ICEhRGVzY1snW1tFbnVtZXJhYmxlXV0nXSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiAhIURlc2NbJ1tbQ29uZmlndXJhYmxlXV0nXVxuXHRcdFx0fTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignRnJvbVByb3BlcnR5RGVzY3JpcHRvciBtdXN0IGJlIGNhbGxlZCB3aXRoIGEgZnVsbHkgcG9wdWxhdGVkIFByb3BlcnR5IERlc2NyaXB0b3InKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNS4xLyNzZWMtOC4xMC41XG5cdFRvUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBUb1Byb3BlcnR5RGVzY3JpcHRvcihPYmopIHtcblx0XHRpZiAodGhpcy5UeXBlKE9iaikgIT09ICdPYmplY3QnKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdUb1Byb3BlcnR5RGVzY3JpcHRvciByZXF1aXJlcyBhbiBvYmplY3QnKTtcblx0XHR9XG5cblx0XHR2YXIgZGVzYyA9IHt9O1xuXHRcdGlmIChoYXMoT2JqLCAnZW51bWVyYWJsZScpKSB7XG5cdFx0XHRkZXNjWydbW0VudW1lcmFibGVdXSddID0gdGhpcy5Ub0Jvb2xlYW4oT2JqLmVudW1lcmFibGUpO1xuXHRcdH1cblx0XHRpZiAoaGFzKE9iaiwgJ2NvbmZpZ3VyYWJsZScpKSB7XG5cdFx0XHRkZXNjWydbW0NvbmZpZ3VyYWJsZV1dJ10gPSB0aGlzLlRvQm9vbGVhbihPYmouY29uZmlndXJhYmxlKTtcblx0XHR9XG5cdFx0aWYgKGhhcyhPYmosICd2YWx1ZScpKSB7XG5cdFx0XHRkZXNjWydbW1ZhbHVlXV0nXSA9IE9iai52YWx1ZTtcblx0XHR9XG5cdFx0aWYgKGhhcyhPYmosICd3cml0YWJsZScpKSB7XG5cdFx0XHRkZXNjWydbW1dyaXRhYmxlXV0nXSA9IHRoaXMuVG9Cb29sZWFuKE9iai53cml0YWJsZSk7XG5cdFx0fVxuXHRcdGlmIChoYXMoT2JqLCAnZ2V0JykpIHtcblx0XHRcdHZhciBnZXR0ZXIgPSBPYmouZ2V0O1xuXHRcdFx0aWYgKHR5cGVvZiBnZXR0ZXIgIT09ICd1bmRlZmluZWQnICYmICF0aGlzLklzQ2FsbGFibGUoZ2V0dGVyKSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdnZXR0ZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cdFx0XHR9XG5cdFx0XHRkZXNjWydbW0dldF1dJ10gPSBnZXR0ZXI7XG5cdFx0fVxuXHRcdGlmIChoYXMoT2JqLCAnc2V0JykpIHtcblx0XHRcdHZhciBzZXR0ZXIgPSBPYmouc2V0O1xuXHRcdFx0aWYgKHR5cGVvZiBzZXR0ZXIgIT09ICd1bmRlZmluZWQnICYmICF0aGlzLklzQ2FsbGFibGUoc2V0dGVyKSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdzZXR0ZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cdFx0XHR9XG5cdFx0XHRkZXNjWydbW1NldF1dJ10gPSBzZXR0ZXI7XG5cdFx0fVxuXG5cdFx0aWYgKChoYXMoZGVzYywgJ1tbR2V0XV0nKSB8fCBoYXMoZGVzYywgJ1tbU2V0XV0nKSkgJiYgKGhhcyhkZXNjLCAnW1tWYWx1ZV1dJykgfHwgaGFzKGRlc2MsICdbW1dyaXRhYmxlXV0nKSkpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgcHJvcGVydHkgZGVzY3JpcHRvci4gQ2Fubm90IGJvdGggc3BlY2lmeSBhY2Nlc3NvcnMgYW5kIGEgdmFsdWUgb3Igd3JpdGFibGUgYXR0cmlidXRlJyk7XG5cdFx0fVxuXHRcdHJldHVybiBkZXNjO1xuXHR9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVTNTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2VzMjAxNicpO1xuIiwidmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkge1xuXHRpZiAoT2JqZWN0LmFzc2lnbikge1xuXHRcdHJldHVybiBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKTtcblx0fVxuXHRmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG5cdFx0aWYgKGhhcy5jYWxsKHNvdXJjZSwga2V5KSkge1xuXHRcdFx0dGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHRhcmdldDtcbn07XG4iLCJ2YXIgJGlzTmFOID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIChhKSB7IHJldHVybiBhICE9PSBhOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE51bWJlci5pc0Zpbml0ZSB8fCBmdW5jdGlvbiAoeCkgeyByZXR1cm4gdHlwZW9mIHggPT09ICdudW1iZXInICYmICEkaXNOYU4oeCkgJiYgeCAhPT0gSW5maW5pdHkgJiYgeCAhPT0gLUluZmluaXR5OyB9O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBOdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gaXNOYU4oYSkge1xuXHRyZXR1cm4gYSAhPT0gYTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzUHJpbWl0aXZlKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbW9kKG51bWJlciwgbW9kdWxvKSB7XG5cdHZhciByZW1haW4gPSBudW1iZXIgJSBtb2R1bG87XG5cdHJldHVybiBNYXRoLmZsb29yKHJlbWFpbiA+PSAwID8gcmVtYWluIDogcmVtYWluICsgbW9kdWxvKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNpZ24obnVtYmVyKSB7XG5cdHJldHVybiBudW1iZXIgPj0gMCA/IDEgOiAtMTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbnZhciBpc1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vaGVscGVycy9pc1ByaW1pdGl2ZScpO1xuXG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJ2lzLWNhbGxhYmxlJyk7XG5cbi8vIGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDguMTJcbnZhciBFUzVpbnRlcm5hbFNsb3RzID0ge1xuXHQnW1tEZWZhdWx0VmFsdWVdXSc6IGZ1bmN0aW9uIChPLCBoaW50KSB7XG5cdFx0dmFyIGFjdHVhbEhpbnQgPSBoaW50IHx8ICh0b1N0ci5jYWxsKE8pID09PSAnW29iamVjdCBEYXRlXScgPyBTdHJpbmcgOiBOdW1iZXIpO1xuXG5cdFx0aWYgKGFjdHVhbEhpbnQgPT09IFN0cmluZyB8fCBhY3R1YWxIaW50ID09PSBOdW1iZXIpIHtcblx0XHRcdHZhciBtZXRob2RzID0gYWN0dWFsSGludCA9PT0gU3RyaW5nID8gWyd0b1N0cmluZycsICd2YWx1ZU9mJ10gOiBbJ3ZhbHVlT2YnLCAndG9TdHJpbmcnXTtcblx0XHRcdHZhciB2YWx1ZSwgaTtcblx0XHRcdGZvciAoaSA9IDA7IGkgPCBtZXRob2RzLmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdGlmIChpc0NhbGxhYmxlKE9bbWV0aG9kc1tpXV0pKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBPW21ldGhvZHNbaV1dKCk7XG5cdFx0XHRcdFx0aWYgKGlzUHJpbWl0aXZlKHZhbHVlKSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignTm8gZGVmYXVsdCB2YWx1ZScpO1xuXHRcdH1cblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIFtbRGVmYXVsdFZhbHVlXV0gaGludCBzdXBwbGllZCcpO1xuXHR9XG59O1xuXG4vLyBodHRwczovL2VzNS5naXRodWIuaW8vI3g5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvUHJpbWl0aXZlKGlucHV0LCBQcmVmZXJyZWRUeXBlKSB7XG5cdGlmIChpc1ByaW1pdGl2ZShpbnB1dCkpIHtcblx0XHRyZXR1cm4gaW5wdXQ7XG5cdH1cblx0cmV0dXJuIEVTNWludGVybmFsU2xvdHNbJ1tbRGVmYXVsdFZhbHVlXV0nXShpbnB1dCwgUHJlZmVycmVkVHlwZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzU3ltYm9scyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gJ3N5bWJvbCc7XG5cbnZhciBpc1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vaGVscGVycy9pc1ByaW1pdGl2ZScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCdpcy1jYWxsYWJsZScpO1xudmFyIGlzRGF0ZSA9IHJlcXVpcmUoJ2lzLWRhdGUtb2JqZWN0Jyk7XG52YXIgaXNTeW1ib2wgPSByZXF1aXJlKCdpcy1zeW1ib2wnKTtcblxudmFyIG9yZGluYXJ5VG9QcmltaXRpdmUgPSBmdW5jdGlvbiBPcmRpbmFyeVRvUHJpbWl0aXZlKE8sIGhpbnQpIHtcblx0aWYgKHR5cGVvZiBPID09PSAndW5kZWZpbmVkJyB8fCBPID09PSBudWxsKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgbWV0aG9kIG9uICcgKyBPKTtcblx0fVxuXHRpZiAodHlwZW9mIGhpbnQgIT09ICdzdHJpbmcnIHx8IChoaW50ICE9PSAnbnVtYmVyJyAmJiBoaW50ICE9PSAnc3RyaW5nJykpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdoaW50IG11c3QgYmUgXCJzdHJpbmdcIiBvciBcIm51bWJlclwiJyk7XG5cdH1cblx0dmFyIG1ldGhvZE5hbWVzID0gaGludCA9PT0gJ3N0cmluZycgPyBbJ3RvU3RyaW5nJywgJ3ZhbHVlT2YnXSA6IFsndmFsdWVPZicsICd0b1N0cmluZyddO1xuXHR2YXIgbWV0aG9kLCByZXN1bHQsIGk7XG5cdGZvciAoaSA9IDA7IGkgPCBtZXRob2ROYW1lcy5sZW5ndGg7ICsraSkge1xuXHRcdG1ldGhvZCA9IE9bbWV0aG9kTmFtZXNbaV1dO1xuXHRcdGlmIChpc0NhbGxhYmxlKG1ldGhvZCkpIHtcblx0XHRcdHJlc3VsdCA9IG1ldGhvZC5jYWxsKE8pO1xuXHRcdFx0aWYgKGlzUHJpbWl0aXZlKHJlc3VsdCkpIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0dGhyb3cgbmV3IFR5cGVFcnJvcignTm8gZGVmYXVsdCB2YWx1ZScpO1xufTtcblxudmFyIEdldE1ldGhvZCA9IGZ1bmN0aW9uIEdldE1ldGhvZChPLCBQKSB7XG5cdHZhciBmdW5jID0gT1tQXTtcblx0aWYgKGZ1bmMgIT09IG51bGwgJiYgdHlwZW9mIGZ1bmMgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0aWYgKCFpc0NhbGxhYmxlKGZ1bmMpKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKGZ1bmMgKyAnIHJldHVybmVkIGZvciBwcm9wZXJ0eSAnICsgUCArICcgb2Ygb2JqZWN0ICcgKyBPICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuXHRcdH1cblx0XHRyZXR1cm4gZnVuYztcblx0fVxufTtcblxuLy8gaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXRvcHJpbWl0aXZlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvUHJpbWl0aXZlKGlucHV0LCBQcmVmZXJyZWRUeXBlKSB7XG5cdGlmIChpc1ByaW1pdGl2ZShpbnB1dCkpIHtcblx0XHRyZXR1cm4gaW5wdXQ7XG5cdH1cblx0dmFyIGhpbnQgPSAnZGVmYXVsdCc7XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuXHRcdGlmIChQcmVmZXJyZWRUeXBlID09PSBTdHJpbmcpIHtcblx0XHRcdGhpbnQgPSAnc3RyaW5nJztcblx0XHR9IGVsc2UgaWYgKFByZWZlcnJlZFR5cGUgPT09IE51bWJlcikge1xuXHRcdFx0aGludCA9ICdudW1iZXInO1xuXHRcdH1cblx0fVxuXG5cdHZhciBleG90aWNUb1ByaW07XG5cdGlmIChoYXNTeW1ib2xzKSB7XG5cdFx0aWYgKFN5bWJvbC50b1ByaW1pdGl2ZSkge1xuXHRcdFx0ZXhvdGljVG9QcmltID0gR2V0TWV0aG9kKGlucHV0LCBTeW1ib2wudG9QcmltaXRpdmUpO1xuXHRcdH0gZWxzZSBpZiAoaXNTeW1ib2woaW5wdXQpKSB7XG5cdFx0XHRleG90aWNUb1ByaW0gPSBTeW1ib2wucHJvdG90eXBlLnZhbHVlT2Y7XG5cdFx0fVxuXHR9XG5cdGlmICh0eXBlb2YgZXhvdGljVG9QcmltICE9PSAndW5kZWZpbmVkJykge1xuXHRcdHZhciByZXN1bHQgPSBleG90aWNUb1ByaW0uY2FsbChpbnB1dCwgaGludCk7XG5cdFx0aWYgKGlzUHJpbWl0aXZlKHJlc3VsdCkpIHtcblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ3VuYWJsZSB0byBjb252ZXJ0IGV4b3RpYyBvYmplY3QgdG8gcHJpbWl0aXZlJyk7XG5cdH1cblx0aWYgKGhpbnQgPT09ICdkZWZhdWx0JyAmJiAoaXNEYXRlKGlucHV0KSB8fCBpc1N5bWJvbChpbnB1dCkpKSB7XG5cdFx0aGludCA9ICdzdHJpbmcnO1xuXHR9XG5cdHJldHVybiBvcmRpbmFyeVRvUHJpbWl0aXZlKGlucHV0LCBoaW50ID09PSAnZGVmYXVsdCcgPyAnbnVtYmVyJyA6IGhpbnQpO1xufTtcbiIsIlxudmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZvckVhY2ggKG9iaiwgZm4sIGN0eCkge1xuICAgIGlmICh0b1N0cmluZy5jYWxsKGZuKSAhPT0gJ1tvYmplY3QgRnVuY3Rpb25dJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpdGVyYXRvciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICB9XG4gICAgdmFyIGwgPSBvYmoubGVuZ3RoO1xuICAgIGlmIChsID09PSArbCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgZm4uY2FsbChjdHgsIG9ialtpXSwgaSwgb2JqKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAodmFyIGsgaW4gb2JqKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwob2JqLCBrKSkge1xuICAgICAgICAgICAgICAgIGZuLmNhbGwoY3R4LCBvYmpba10sIGssIG9iaik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG4iLCIndXNlIHN0cmljdCc7XG5cbi8qIGVzbGludCBuby1pbnZhbGlkLXRoaXM6IDEgKi9cblxudmFyIEVSUk9SX01FU1NBR0UgPSAnRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgY2FsbGVkIG9uIGluY29tcGF0aWJsZSAnO1xudmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBmdW5jVHlwZSA9ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZCh0aGF0KSB7XG4gICAgdmFyIHRhcmdldCA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiB0YXJnZXQgIT09ICdmdW5jdGlvbicgfHwgdG9TdHIuY2FsbCh0YXJnZXQpICE9PSBmdW5jVHlwZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEVSUk9SX01FU1NBR0UgKyB0YXJnZXQpO1xuICAgIH1cbiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuICAgIHZhciBib3VuZDtcbiAgICB2YXIgYmluZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIGJvdW5kKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGFyZ2V0LmFwcGx5KFxuICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChPYmplY3QocmVzdWx0KSA9PT0gcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5hcHBseShcbiAgICAgICAgICAgICAgICB0aGF0LFxuICAgICAgICAgICAgICAgIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGJvdW5kTGVuZ3RoID0gTWF0aC5tYXgoMCwgdGFyZ2V0Lmxlbmd0aCAtIGFyZ3MubGVuZ3RoKTtcbiAgICB2YXIgYm91bmRBcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib3VuZExlbmd0aDsgaSsrKSB7XG4gICAgICAgIGJvdW5kQXJncy5wdXNoKCckJyArIGkpO1xuICAgIH1cblxuICAgIGJvdW5kID0gRnVuY3Rpb24oJ2JpbmRlcicsICdyZXR1cm4gZnVuY3Rpb24gKCcgKyBib3VuZEFyZ3Muam9pbignLCcpICsgJyl7IHJldHVybiBiaW5kZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpOyB9JykoYmluZGVyKTtcblxuICAgIGlmICh0YXJnZXQucHJvdG90eXBlKSB7XG4gICAgICAgIHZhciBFbXB0eSA9IGZ1bmN0aW9uIEVtcHR5KCkge307XG4gICAgICAgIEVtcHR5LnByb3RvdHlwZSA9IHRhcmdldC5wcm90b3R5cGU7XG4gICAgICAgIGJvdW5kLnByb3RvdHlwZSA9IG5ldyBFbXB0eSgpO1xuICAgICAgICBFbXB0eS5wcm90b3R5cGUgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBib3VuZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCB8fCBpbXBsZW1lbnRhdGlvbjtcbiIsInZhciBiaW5kID0gcmVxdWlyZSgnZnVuY3Rpb24tYmluZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGZuVG9TdHIgPSBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmc7XG5cbnZhciBjb25zdHJ1Y3RvclJlZ2V4ID0gL15cXHMqY2xhc3MgLztcbnZhciBpc0VTNkNsYXNzRm4gPSBmdW5jdGlvbiBpc0VTNkNsYXNzRm4odmFsdWUpIHtcblx0dHJ5IHtcblx0XHR2YXIgZm5TdHIgPSBmblRvU3RyLmNhbGwodmFsdWUpO1xuXHRcdHZhciBzaW5nbGVTdHJpcHBlZCA9IGZuU3RyLnJlcGxhY2UoL1xcL1xcLy4qXFxuL2csICcnKTtcblx0XHR2YXIgbXVsdGlTdHJpcHBlZCA9IHNpbmdsZVN0cmlwcGVkLnJlcGxhY2UoL1xcL1xcKlsuXFxzXFxTXSpcXCpcXC8vZywgJycpO1xuXHRcdHZhciBzcGFjZVN0cmlwcGVkID0gbXVsdGlTdHJpcHBlZC5yZXBsYWNlKC9cXG4vbWcsICcgJykucmVwbGFjZSgvIHsyfS9nLCAnICcpO1xuXHRcdHJldHVybiBjb25zdHJ1Y3RvclJlZ2V4LnRlc3Qoc3BhY2VTdHJpcHBlZCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7IC8vIG5vdCBhIGZ1bmN0aW9uXG5cdH1cbn07XG5cbnZhciB0cnlGdW5jdGlvbk9iamVjdCA9IGZ1bmN0aW9uIHRyeUZ1bmN0aW9uT2JqZWN0KHZhbHVlKSB7XG5cdHRyeSB7XG5cdFx0aWYgKGlzRVM2Q2xhc3NGbih2YWx1ZSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0Zm5Ub1N0ci5jYWxsKHZhbHVlKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZm5DbGFzcyA9ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG52YXIgZ2VuQ2xhc3MgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nO1xudmFyIGhhc1RvU3RyaW5nVGFnID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbGxhYmxlKHZhbHVlKSB7XG5cdGlmICghdmFsdWUpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKGhhc1RvU3RyaW5nVGFnKSB7IHJldHVybiB0cnlGdW5jdGlvbk9iamVjdCh2YWx1ZSk7IH1cblx0aWYgKGlzRVM2Q2xhc3NGbih2YWx1ZSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdHZhciBzdHJDbGFzcyA9IHRvU3RyLmNhbGwodmFsdWUpO1xuXHRyZXR1cm4gc3RyQ2xhc3MgPT09IGZuQ2xhc3MgfHwgc3RyQ2xhc3MgPT09IGdlbkNsYXNzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGdldERheSA9IERhdGUucHJvdG90eXBlLmdldERheTtcbnZhciB0cnlEYXRlT2JqZWN0ID0gZnVuY3Rpb24gdHJ5RGF0ZU9iamVjdCh2YWx1ZSkge1xuXHR0cnkge1xuXHRcdGdldERheS5jYWxsKHZhbHVlKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcblxudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBkYXRlQ2xhc3MgPSAnW29iamVjdCBEYXRlXSc7XG52YXIgaGFzVG9TdHJpbmdUYWcgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWcgPT09ICdzeW1ib2wnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzRGF0ZU9iamVjdCh2YWx1ZSkge1xuXHRpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JyB8fCB2YWx1ZSA9PT0gbnVsbCkgeyByZXR1cm4gZmFsc2U7IH1cblx0cmV0dXJuIGhhc1RvU3RyaW5nVGFnID8gdHJ5RGF0ZU9iamVjdCh2YWx1ZSkgOiB0b1N0ci5jYWxsKHZhbHVlKSA9PT0gZGF0ZUNsYXNzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhcyA9IHJlcXVpcmUoJ2hhcycpO1xudmFyIHJlZ2V4RXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxudmFyIHRyeVJlZ2V4RXhlY0NhbGwgPSBmdW5jdGlvbiB0cnlSZWdleEV4ZWModmFsdWUpIHtcblx0dHJ5IHtcblx0XHR2YXIgbGFzdEluZGV4ID0gdmFsdWUubGFzdEluZGV4O1xuXHRcdHZhbHVlLmxhc3RJbmRleCA9IDA7XG5cblx0XHRyZWdleEV4ZWMuY2FsbCh2YWx1ZSk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cdFx0dmFsdWUubGFzdEluZGV4ID0gbGFzdEluZGV4O1xuXHR9XG59O1xudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciByZWdleENsYXNzID0gJ1tvYmplY3QgUmVnRXhwXSc7XG52YXIgaGFzVG9TdHJpbmdUYWcgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWcgPT09ICdzeW1ib2wnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzUmVnZXgodmFsdWUpIHtcblx0aWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdGlmICghaGFzVG9TdHJpbmdUYWcpIHtcblx0XHRyZXR1cm4gdG9TdHIuY2FsbCh2YWx1ZSkgPT09IHJlZ2V4Q2xhc3M7XG5cdH1cblxuXHR2YXIgZGVzY3JpcHRvciA9IGdPUEQodmFsdWUsICdsYXN0SW5kZXgnKTtcblx0dmFyIGhhc0xhc3RJbmRleERhdGFQcm9wZXJ0eSA9IGRlc2NyaXB0b3IgJiYgaGFzKGRlc2NyaXB0b3IsICd2YWx1ZScpO1xuXHRpZiAoIWhhc0xhc3RJbmRleERhdGFQcm9wZXJ0eSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0cnlSZWdleEV4ZWNDYWxsKHZhbHVlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgaGFzU3ltYm9scyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbCgpID09PSAnc3ltYm9sJztcblxuaWYgKGhhc1N5bWJvbHMpIHtcblx0dmFyIHN5bVRvU3RyID0gU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZztcblx0dmFyIHN5bVN0cmluZ1JlZ2V4ID0gL15TeW1ib2xcXCguKlxcKSQvO1xuXHR2YXIgaXNTeW1ib2xPYmplY3QgPSBmdW5jdGlvbiBpc1N5bWJvbE9iamVjdCh2YWx1ZSkge1xuXHRcdGlmICh0eXBlb2YgdmFsdWUudmFsdWVPZigpICE9PSAnc3ltYm9sJykgeyByZXR1cm4gZmFsc2U7IH1cblx0XHRyZXR1cm4gc3ltU3RyaW5nUmVnZXgudGVzdChzeW1Ub1N0ci5jYWxsKHZhbHVlKSk7XG5cdH07XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcblx0XHRpZiAodHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJykgeyByZXR1cm4gdHJ1ZTsgfVxuXHRcdGlmICh0b1N0ci5jYWxsKHZhbHVlKSAhPT0gJ1tvYmplY3QgU3ltYm9sXScpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiBpc1N5bWJvbE9iamVjdCh2YWx1ZSk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fTtcbn0gZWxzZSB7XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcblx0XHQvLyB0aGlzIGVudmlyb25tZW50IGRvZXMgbm90IHN1cHBvcnQgU3ltYm9scy5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIG1vZGlmaWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG52YXIgaXNBcmdzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpO1xudmFyIGlzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgaGFzRG9udEVudW1CdWcgPSAhaXNFbnVtZXJhYmxlLmNhbGwoeyB0b1N0cmluZzogbnVsbCB9LCAndG9TdHJpbmcnKTtcbnZhciBoYXNQcm90b0VudW1CdWcgPSBpc0VudW1lcmFibGUuY2FsbChmdW5jdGlvbiAoKSB7fSwgJ3Byb3RvdHlwZScpO1xudmFyIGRvbnRFbnVtcyA9IFtcblx0J3RvU3RyaW5nJyxcblx0J3RvTG9jYWxlU3RyaW5nJyxcblx0J3ZhbHVlT2YnLFxuXHQnaGFzT3duUHJvcGVydHknLFxuXHQnaXNQcm90b3R5cGVPZicsXG5cdCdwcm9wZXJ0eUlzRW51bWVyYWJsZScsXG5cdCdjb25zdHJ1Y3Rvcidcbl07XG52YXIgZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUgPSBmdW5jdGlvbiAobykge1xuXHR2YXIgY3RvciA9IG8uY29uc3RydWN0b3I7XG5cdHJldHVybiBjdG9yICYmIGN0b3IucHJvdG90eXBlID09PSBvO1xufTtcbnZhciBleGNsdWRlZEtleXMgPSB7XG5cdCRjb25zb2xlOiB0cnVlLFxuXHQkZXh0ZXJuYWw6IHRydWUsXG5cdCRmcmFtZTogdHJ1ZSxcblx0JGZyYW1lRWxlbWVudDogdHJ1ZSxcblx0JGZyYW1lczogdHJ1ZSxcblx0JGlubmVySGVpZ2h0OiB0cnVlLFxuXHQkaW5uZXJXaWR0aDogdHJ1ZSxcblx0JG91dGVySGVpZ2h0OiB0cnVlLFxuXHQkb3V0ZXJXaWR0aDogdHJ1ZSxcblx0JHBhZ2VYT2Zmc2V0OiB0cnVlLFxuXHQkcGFnZVlPZmZzZXQ6IHRydWUsXG5cdCRwYXJlbnQ6IHRydWUsXG5cdCRzY3JvbGxMZWZ0OiB0cnVlLFxuXHQkc2Nyb2xsVG9wOiB0cnVlLFxuXHQkc2Nyb2xsWDogdHJ1ZSxcblx0JHNjcm9sbFk6IHRydWUsXG5cdCRzZWxmOiB0cnVlLFxuXHQkd2Via2l0SW5kZXhlZERCOiB0cnVlLFxuXHQkd2Via2l0U3RvcmFnZUluZm86IHRydWUsXG5cdCR3aW5kb3c6IHRydWVcbn07XG52YXIgaGFzQXV0b21hdGlvbkVxdWFsaXR5QnVnID0gKGZ1bmN0aW9uICgpIHtcblx0LyogZ2xvYmFsIHdpbmRvdyAqL1xuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGZvciAodmFyIGsgaW4gd2luZG93KSB7XG5cdFx0dHJ5IHtcblx0XHRcdGlmICghZXhjbHVkZWRLZXlzWyckJyArIGtdICYmIGhhcy5jYWxsKHdpbmRvdywgaykgJiYgd2luZG93W2tdICE9PSBudWxsICYmIHR5cGVvZiB3aW5kb3dba10gPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0ZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUod2luZG93W2tdKTtcblx0XHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBmYWxzZTtcbn0oKSk7XG52YXIgZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGVJZk5vdEJ1Z2d5ID0gZnVuY3Rpb24gKG8pIHtcblx0LyogZ2xvYmFsIHdpbmRvdyAqL1xuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgfHwgIWhhc0F1dG9tYXRpb25FcXVhbGl0eUJ1Zykge1xuXHRcdHJldHVybiBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZShvKTtcblx0fVxuXHR0cnkge1xuXHRcdHJldHVybiBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZShvKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcblxudmFyIGtleXNTaGltID0gZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcblx0dmFyIGlzT2JqZWN0ID0gb2JqZWN0ICE9PSBudWxsICYmIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnO1xuXHR2YXIgaXNGdW5jdGlvbiA9IHRvU3RyLmNhbGwob2JqZWN0KSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcblx0dmFyIGlzQXJndW1lbnRzID0gaXNBcmdzKG9iamVjdCk7XG5cdHZhciBpc1N0cmluZyA9IGlzT2JqZWN0ICYmIHRvU3RyLmNhbGwob2JqZWN0KSA9PT0gJ1tvYmplY3QgU3RyaW5nXSc7XG5cdHZhciB0aGVLZXlzID0gW107XG5cblx0aWYgKCFpc09iamVjdCAmJiAhaXNGdW5jdGlvbiAmJiAhaXNBcmd1bWVudHMpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3Qua2V5cyBjYWxsZWQgb24gYSBub24tb2JqZWN0Jyk7XG5cdH1cblxuXHR2YXIgc2tpcFByb3RvID0gaGFzUHJvdG9FbnVtQnVnICYmIGlzRnVuY3Rpb247XG5cdGlmIChpc1N0cmluZyAmJiBvYmplY3QubGVuZ3RoID4gMCAmJiAhaGFzLmNhbGwob2JqZWN0LCAwKSkge1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgb2JqZWN0Lmxlbmd0aDsgKytpKSB7XG5cdFx0XHR0aGVLZXlzLnB1c2goU3RyaW5nKGkpKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoaXNBcmd1bWVudHMgJiYgb2JqZWN0Lmxlbmd0aCA+IDApIHtcblx0XHRmb3IgKHZhciBqID0gMDsgaiA8IG9iamVjdC5sZW5ndGg7ICsraikge1xuXHRcdFx0dGhlS2V5cy5wdXNoKFN0cmluZyhqKSk7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdGZvciAodmFyIG5hbWUgaW4gb2JqZWN0KSB7XG5cdFx0XHRpZiAoIShza2lwUHJvdG8gJiYgbmFtZSA9PT0gJ3Byb3RvdHlwZScpICYmIGhhcy5jYWxsKG9iamVjdCwgbmFtZSkpIHtcblx0XHRcdFx0dGhlS2V5cy5wdXNoKFN0cmluZyhuYW1lKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKGhhc0RvbnRFbnVtQnVnKSB7XG5cdFx0dmFyIHNraXBDb25zdHJ1Y3RvciA9IGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlSWZOb3RCdWdneShvYmplY3QpO1xuXG5cdFx0Zm9yICh2YXIgayA9IDA7IGsgPCBkb250RW51bXMubGVuZ3RoOyArK2spIHtcblx0XHRcdGlmICghKHNraXBDb25zdHJ1Y3RvciAmJiBkb250RW51bXNba10gPT09ICdjb25zdHJ1Y3RvcicpICYmIGhhcy5jYWxsKG9iamVjdCwgZG9udEVudW1zW2tdKSkge1xuXHRcdFx0XHR0aGVLZXlzLnB1c2goZG9udEVudW1zW2tdKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuIHRoZUtleXM7XG59O1xuXG5rZXlzU2hpbS5zaGltID0gZnVuY3Rpb24gc2hpbU9iamVjdEtleXMoKSB7XG5cdGlmIChPYmplY3Qua2V5cykge1xuXHRcdHZhciBrZXlzV29ya3NXaXRoQXJndW1lbnRzID0gKGZ1bmN0aW9uICgpIHtcblx0XHRcdC8vIFNhZmFyaSA1LjAgYnVnXG5cdFx0XHRyZXR1cm4gKE9iamVjdC5rZXlzKGFyZ3VtZW50cykgfHwgJycpLmxlbmd0aCA9PT0gMjtcblx0XHR9KDEsIDIpKTtcblx0XHRpZiAoIWtleXNXb3Jrc1dpdGhBcmd1bWVudHMpIHtcblx0XHRcdHZhciBvcmlnaW5hbEtleXMgPSBPYmplY3Qua2V5cztcblx0XHRcdE9iamVjdC5rZXlzID0gZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcblx0XHRcdFx0aWYgKGlzQXJncyhvYmplY3QpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9yaWdpbmFsS2V5cyhzbGljZS5jYWxsKG9iamVjdCkpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiBvcmlnaW5hbEtleXMob2JqZWN0KTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0T2JqZWN0LmtleXMgPSBrZXlzU2hpbTtcblx0fVxuXHRyZXR1cm4gT2JqZWN0LmtleXMgfHwga2V5c1NoaW07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXNTaGltO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG5cdHZhciBzdHIgPSB0b1N0ci5jYWxsKHZhbHVlKTtcblx0dmFyIGlzQXJncyA9IHN0ciA9PT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cdGlmICghaXNBcmdzKSB7XG5cdFx0aXNBcmdzID0gc3RyICE9PSAnW29iamVjdCBBcnJheV0nICYmXG5cdFx0XHR2YWx1ZSAhPT0gbnVsbCAmJlxuXHRcdFx0dHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuXHRcdFx0dHlwZW9mIHZhbHVlLmxlbmd0aCA9PT0gJ251bWJlcicgJiZcblx0XHRcdHZhbHVlLmxlbmd0aCA+PSAwICYmXG5cdFx0XHR0b1N0ci5jYWxsKHZhbHVlLmNhbGxlZSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cdH1cblx0cmV0dXJuIGlzQXJncztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBFUyA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0L2VzNycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJ2hhcycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG52YXIgaXNFbnVtZXJhYmxlID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHZhbHVlcyhPKSB7XG5cdHZhciBvYmogPSBFUy5SZXF1aXJlT2JqZWN0Q29lcmNpYmxlKE8pO1xuXHR2YXIgdmFscyA9IFtdO1xuXHRmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG5cdFx0aWYgKGhhcyhvYmosIGtleSkgJiYgaXNFbnVtZXJhYmxlKG9iaiwga2V5KSkge1xuXHRcdFx0dmFscy5wdXNoKG9ialtrZXldKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHZhbHM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIHNoaW0gPSByZXF1aXJlKCcuL3NoaW0nKTtcblxudmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblxuZGVmaW5lKHBvbHlmaWxsLCB7XG5cdGdldFBvbHlmaWxsOiBnZXRQb2x5ZmlsbCxcblx0aW1wbGVtZW50YXRpb246IGltcGxlbWVudGF0aW9uLFxuXHRzaGltOiBzaGltXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBwb2x5ZmlsbDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRyZXR1cm4gdHlwZW9mIE9iamVjdC52YWx1ZXMgPT09ICdmdW5jdGlvbicgPyBPYmplY3QudmFsdWVzIDogaW1wbGVtZW50YXRpb247XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltVmFsdWVzKCkge1xuXHR2YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXHRkZWZpbmUoT2JqZWN0LCB7IHZhbHVlczogcG9seWZpbGwgfSwge1xuXHRcdHZhbHVlczogZnVuY3Rpb24gdGVzdFZhbHVlcygpIHtcblx0XHRcdHJldHVybiBPYmplY3QudmFsdWVzICE9PSBwb2x5ZmlsbDtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBzdGF0ZSA9IHtcbiAgICBpc01vYmlsZTogZmFsc2UsXG4gICAgaGFzVG91Y2g6IGZhbHNlXG59O1xuXG4vLyBTRUxFQ1RPUiBDT05TVEFOVFNcbmNvbnN0IHtcbiAgICBNQUlOX05BVixcbiAgICBCQU5ORVIsXG4gICAgTE9HT19XUkFQLFxuICAgIFRST1dFTF9JQ09OXG59ID0gcmVxdWlyZSgnLi9zZWxlY3RvcnMnKTtcblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gRE9NIC8gRGlzcGxheSBmdW5jdGlvbnNcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuY29uc3QgT2JqX3ZhbHVlcyA9IHJlcXVpcmUoJ29iamVjdC52YWx1ZXMnKTtcblxuLy8gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbi8vIEFkZHMgaGlkZGVuIGNsYXNzIHRvIGFsbCBjbGFzc2VzIHBhc3NlZCBpbiBhcyBhcmdzXG4vLyAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuZnVuY3Rpb24gaGlkZSgpIHtcbiAgICBPYmpfdmFsdWVzKGFyZ3VtZW50cykuZm9yRWFjaCgodGFyZ2V0KSA9PiB7XG4gICAgICAgICQodGFyZ2V0KS5hZGRDbGFzcygnaGlkZGVuJyk7XG4gICAgfSk7XG59XG5cbi8vICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqXG4vLyBSZW1vdmVzIGhpZGRlbiBjbGFzcyBmcm9tIGFsbCBjbGFzc2VzIHBhc3NlZCBpbiBhcyBhcmdzXG4vLyAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuZnVuY3Rpb24gc2hvdygpIHtcbiAgICBPYmpfdmFsdWVzKGFyZ3VtZW50cykuZm9yRWFjaCgodGFyZ2V0KSA9PiB7XG4gICAgICAgICQodGFyZ2V0KS5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XG4gICAgfSk7XG59XG5cblxuXG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEFQSSBoYW5kbGVycyAvIERpc3BsYXkgaGFuZGxlcnNcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuXG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEFQSSBjYWxsc1xuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gVXRpbGl0eSBmdW5jdGlvbnNcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuY29uc3QgeyBcbiAgICBmaXhCYW5uZXIsIFxuICAgIGV4cGFuZE5hdixcbiAgICBzaHJpbmtOYXYsIFxuICAgIHRvZ2dsZUhlYWRlckJnSW1nLFxuICAgIHNldEJnSW1nSGVpZ2h0LFxuICAgIGZhZGVPdXRMb2FkU2NyZWVuXG59ID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG5cbi8vICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqXG4vLyBHaXZlcyBhIHNtb290aCBhbmltYXRpb24gdG8gcGFnZSBuYXZpZ2F0aW9uIGJyaW5naW5nIHRoZSBcbi8vIHRhcmdldCBlbGVtZW50IHRvIHRoZSB0b3Agb2YgdGhlIHdpbmRvd1xuLy8gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbmZ1bmN0aW9uIHNtb290aFNjcm9sbCh0YXJnZXQsIGR1cmF0aW9uID0gMTIwMCwgb2Zmc2V0ID0gMCkge1xuICAgICQoJ2JvZHksIGh0bWwnKS5hbmltYXRlKHtcbiAgICAgICAgc2Nyb2xsVG9wOiAkKHRhcmdldCkub2Zmc2V0KCkudG9wIC0gb2Zmc2V0XG4gICAgfSwgZHVyYXRpb24pO1xufVxuXG4vLyAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuLy8gRmlyZXMgb24gdXNlciBzY3JvbGwgZXZlbnRcbi8vICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqXG5mdW5jdGlvbiBjaGVja1Njcm9sbFBvcygpIHtcbiAgICAkKHdpbmRvdykuc2Nyb2xsKGUgPT4ge1xuICAgICAgICBpZihsb2NhdGlvbi5wYXRobmFtZSA9PT0gJy8nKSB7XG4gICAgICAgICAgICB0b2dnbGVIZWFkZXJCZ0ltZygpO1xuICAgICAgICAgICAgZml4QmFubmVyKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuXG5cbi8vICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqXG4vLyBDaGVjayBzY3JlZW4gc2l6ZSB0byBkZXRlcm1pbmUgTW9iaWxlIFZzLiBEZXNrdG9wXG4vLyAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuZnVuY3Rpb24gY2hlY2tTaXplSGFuZGxlcigpIHtcbiAgICBjaGVja1NpemUoKTtcbiAgICAkKHdpbmRvdykucmVzaXplKGNoZWNrU2l6ZSk7IFxufVxuXG4vLyAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuLy8gQ2FsbGVkIGJ5IGNoZWNrU2l6ZUhhbmRsZXIgdG8gc2V0IHN0YXRlIGlmIG1vYmlsZSB2aWV3XG4vLyBvciBub3QgKFBvcnRyYWl0IHZpZXcpXG4vLyAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuZnVuY3Rpb24gY2hlY2tTaXplKCkge1xuICAgIGxldCB3aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgIHN0YXRlLmlzTW9iaWxlID0gd2lkdGggPD0gNDE0O1xuICAgIC8vIGlmIGRldmljZSBoYXMgdG91Y2gsIGZpeCBiZyBpbWcgaGVpZ2h0IHRvIGF2b2lkIHBhZ2UganVtcFxuICAgIHN0YXRlLmhhc1RvdWNoID8gc2V0QmdJbWdIZWlnaHQoKSA6IG51bGw7XG4gICAgaWYod2lkdGggPCAxMDYwKSB7XG4gICAgICAgIC8vIHJlbW92ZSB6LWluZGV4IG9uIGhlYWRlciBmb3IgY29sbGFwc2UgbmF2IHZpZXdzICg8MTA2MHB4KVxuICAgICAgICAkKCdoZWFkZXInKS5jc3MoJ3otaW5kZXgnLCAnJyk7XG4gICAgfSBcbiAgICBmaXhCYW5uZXIoKTtcbn1cblxuLy8gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbi8vIENoZWNrcyBpZiBhIHVzZXIgaGFzIHRvdWNoZWQgdGhlaXIgZGV2aWNlIGFuZFxuLy8gYXBwbGllcyBjbGFzcyB0byBib2R5IGFuZCBnbG9iYWwgdmFyIGluZGljYXRpbmcgd2hldGhlclxuLy8gdXNlciBoYXMgdG91Y2hlZCAvIGNhbiB0b3VjaC4gXG4vLyAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuZnVuY3Rpb24gY2hlY2tGb3JUb3VjaCgpIHtcbiAgICAkKHdpbmRvdykub24oJ3RvdWNoc3RhcnQnLCBlID0+IHtcbiAgICAgICAgc3RhdGUuaGFzVG91Y2ggPSB0cnVlO1xuICAgICAgICBzZXRCZ0ltZ0hlaWdodCgpO1xuICAgICAgICAvLyByZW1vdmUgbGlzdGVuZXIgb25jZSBmaXJlZFxuICAgICAgICAkKHdpbmRvdykub2ZmKCd0b3VjaHN0YXJ0Jyk7XG4gICAgfSk7XG59XG5cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gRXZlbnQgTGlzdGVuZXJzXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmZ1bmN0aW9uIGJ1cmdlckNsaWNrKCkge1xuICAgICQoJy5idXJnZXItYnRuJykub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGxldCBidXJnZXIgPSBgLmJ1cmdlci1idG4sIC5idXJnZXItaWNvbiwgJHtNQUlOX05BVn1gO1xuICAgICAgICAkKGJ1cmdlcikudG9nZ2xlQ2xhc3MoJ29wZW4nKTtcbiAgICB9KTtcbn1cblxuXG5mdW5jdGlvbiB0cm93ZWxDbGljaygpIHtcbiAgICAkKFRST1dFTF9JQ09OKS5vbignY2xpY2snLCBlID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBzbW9vdGhTY3JvbGwoJyNvdmVydmlldycpO1xuICAgICAgICAvLyBBZGp1c3QgdGltaW5nIG9uIGJhbm5lciBzaHJpbmsgdG8gY29pbmNpZGUgd2l0aCB0aGVcbiAgICAgICAgLy8gaW5pdGlhbCBzbW9vdGhTY3JvbGwgLS0+IGF2b2lkcyBhIGRlbGF5XG4gICAgICAgIC8vIHNtb290aFNjcm9sbCgnI292ZXJ2aWV3JywgMTAwMCwgLTYwKTtcbiAgICB9KTtcbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gRXZlbnQgTGlzdGVuZXIgR3JvdXBzXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmZ1bmN0aW9uIG5hdkNsaWNrcygpIHtcbiAgICBidXJnZXJDbGljaygpO1xuICAgIC8vIGJ1cmdlckhvdmVyKCk7XG4gICAgdHJvd2VsQ2xpY2soKTtcbn1cblxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBVdGlsaXR5IGFuZCBJbml0aWFsaXphdGlvbiBoYW5kbGVyc1xuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuY29uc3QgeyBzdGFydFNsaWRlU2hvdyB9ID0gcmVxdWlyZSgnLi9zbGlkZXNob3cnKTtcblxuZnVuY3Rpb24gdXRpbHMoKSB7XG4gICAgY2hlY2tTaXplSGFuZGxlcigpOyAvLyBjaGVja3Mgd2lkdGggb24gcmVzaXplXG4gICAgY2hlY2tTY3JvbGxQb3MoKTsgICAvLyBnZXRzIHVzZXIgc2Nyb2xsIHktcG9zIHRvIGFuaW1hdGUgYmFubmVyIG5hdlxuICAgIGNoZWNrRm9yVG91Y2goKTsgICAgLy8gY2hlY2tzIGlmIHVzZXIgaGFzIHRvdWNoIGRldmljZSBieSBkZXRlY3RpbmcgZmlyc3QgdG91Y2ggb24gc2NyZWVuXG59XG5cbmZ1bmN0aW9uIGluaXQoKSB7XG4gICAgaWYobG9jYXRpb24ucGF0aG5hbWUgPT09ICcvJykge1xuICAgICAgICB0b2dnbGVIZWFkZXJCZ0ltZygpO1xuICAgICAgICBmaXhCYW5uZXIoKTtcbiAgICB9XG4gICAgc3RhdGUuaGFzVG91Y2ggPyBzZXRCZ0ltZ0hlaWdodCgpIDogbnVsbDtcbiAgICBmYWRlT3V0TG9hZFNjcmVlbigpO1xuICAgIHN0YXJ0U2xpZGVTaG93KDQwMDApOyAvLyBzdGFydHMgYmcgaW1hZ2Ugc2xpZGVzaG93XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEVudHJ5IHBvaW50IC0tIE1haW5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuJChmdW5jdGlvbiAoKSB7XG4gICAgdXRpbHMoKTtcbiAgICBuYXZDbGlja3MoKTtcbiAgICBpbml0KCk7XG59KTtcblxuIiwiLy8gLy8gLy8gLy8gLy8gLy8gLy8gLy8gLy8gLy9cbi8vXG4vLyAgICAgIFNFTEVDVE9SIENPTlNUQU5UU1xuLy9cbi8vIC8vIC8vIC8vIC8vIC8vIC8vIC8vIC8vIC8vXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIE1BSU5fTkFWOiAnLm1haW4tbmF2JyxcbiAgICBCQU5ORVI6ICcuYmFubmVyJyxcbiAgICBMT0dPX1dSQVA6ICcubG9nby1hLXdyYXAnLFxuICAgIFRST1dFTF9JQ09OOiAnLmljb24tdHJvd2VsLW91dGxpbmUnXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBTTElERVNIT1cgPSAnLnNsaWRlc2hvdyc7XG5jb25zdCBTTElERSA9ICcuc2xpZGUnO1xuXG5mdW5jdGlvbiBuZXh0U2xpZGUoKSB7XG4gICAgLy8gZ2V0IGN1cnJlbnQgc2xpZGUgbnVtYmVyXG4gICAgLy8gaW5jcmVtZW50XG4gICAgLy8gc2V0IGN1cnJlbnQgdG8gbmV3IHNsaWRlIG51bWJlclxuICAgIGxldCAkY3VycmVudCAgPSAkKCcuc2xpZGUuY3VycmVudCcpO1xuICAgIGxldCBzbGlkZU51bSAgPSBwYXJzZUludCgkY3VycmVudC5hdHRyKCdkYXRhLXNsaWRlLW51bScpKTtcbiAgICBsZXQgbmV4dFNsaWRlID0gc2xpZGVOdW0gPCAkKCcuc2xpZGUnKS5sZW5ndGggPyBzbGlkZU51bSArIDEgOiAxO1xuXG4gICAgJGN1cnJlbnQucmVtb3ZlQ2xhc3MoJ2N1cnJlbnQnKTtcbiAgICAkKGAuc2xpZGVbZGF0YS1zbGlkZS1udW09XCIke25leHRTbGlkZX1cIl1gKS5hZGRDbGFzcygnY3VycmVudCcpO1xufVxuXG5mdW5jdGlvbiBzdGFydFNsaWRlU2hvdyhkZWxheSA9IDYwMDApIHtcbiAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgIG5leHRTbGlkZSgpO1xuICAgIH0sIGRlbGF5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IG5leHRTbGlkZSwgc3RhcnRTbGlkZVNob3cgfTtcbiIsIi8vIC8vIC8vIC8vIC8vIC8vIC8vIC8vIC8vIC8vXG4vL1xuLy8gICAgICBVdGlsaXR5IGZ1bmN0aW9uc1xuLy9cbi8vIC8vIC8vIC8vIC8vIC8vIC8vIC8vIC8vIC8vXG5cbi8vIFNFTEVDVE9SIENPTlNUQU5UU1xuY29uc3Qge1xuICAgIE1BSU5fTkFWLFxuICAgIEJBTk5FUixcbiAgICBMT0dPX1dSQVAsXG4gICAgVFJPV0VMX0lDT05cbn0gPSByZXF1aXJlKCcuL3NlbGVjdG9ycycpO1xuXG5cbi8vICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqXG4vLyBjaGVja3MgY3VycmVudCBzY3JvbGxpbmcgcG9zaXRpb24gYW5kIGZpeGVzIGJhbm5lciBpZlxuLy8gdXNlciBzY3JvbGxlZCBkb3duIGJlbG93IGhlYWRlclxuLy8gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbmNvbnN0IGZpeEJhbm5lciA9ICgpID0+IHtcbiAgICAvLyBOZWVkIHRvIGNvbGxhcHNlIG5hdiBpdGVtcyBhbmQgbG9nbyB0byBhIGZpeGVkIGJhbm5lciBhcyBoZWFkZXJcbiAgICAvLyBsZWF2ZXMgdGhlIHdpbmRvd1xuICAgIGxldCB3aW5Ub1RvcERvYyA9ICQod2luZG93KS5zY3JvbGxUb3AoKSxcbiAgICAgICAgbmF2VG9Ub3BEb2MgPSAkKE1BSU5fTkFWKS5vZmZzZXQoKS50b3A7XG4gICAgICAgIFxuICAgIGxldCBuYXZUb1RvcFdpbiA9IG5hdlRvVG9wRG9jIC0gd2luVG9Ub3BEb2M7XG4gICAgaWYobmF2VG9Ub3BXaW4gPD0gNDApIHtcbiAgICAgICAgLy8gbWVudS1uYXYgaXMgaW4gaXRzIHByb3BlciBwb3NpdGlvbiB0byBiZSBmaXhlZFxuICAgICAgICAkKE1BSU5fTkFWKS5hZGRDbGFzcygnZml4ZWQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAkKE1BSU5fTkFWKS5yZW1vdmVDbGFzcygnZml4ZWQnKTtcbiAgICB9XG4gICAgXG4gICAgbGV0IG9mZnNldCA9ICQoJ2hlYWRlcicpLmhlaWdodCgpIC0gJCh3aW5kb3cpLnNjcm9sbFRvcCgpO1xuICAgIC8vIG9mZnNldCBpcyB0aGUgIyBvZiBweCBvZiB0aGUgaGVhZGVyIHRoYXQgaXMgdmlzaWJsZVxuICAgIGlmKG9mZnNldCA8PSAwKSB7XG4gICAgICAgIHNocmlua05hdigpO1xuICAgIH0gZWxzZSBpZihvZmZzZXQgPiAwICYmIHdpbmRvdy5pbm5lcldpZHRoIDw9IDg5OSkge1xuICAgICAgICAkKCdoZWFkZXInKS5yZW1vdmVDbGFzcygnc2hyaW5rJyk7IC8vIGFsbG93cyBmb3IgaGVhZGVyL2Jhbm5lci1iYWNrZHJvcCB0byBzd2l0Y2ggdG8gbWFpbnRhaW4gaW1hZ2Ugb3ZlciBiYWNrZHJvcCBlZmZlY3RcbiAgICB9XG4gICAgaWYob2Zmc2V0ID49IDEwMCkge1xuICAgICAgICBleHBhbmROYXYoKTtcbiAgICB9XG59XG4vLyAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuLy8gRnVsbHkgY29sbGFwc2VzIGJhbm5lciwgbmF2LCAmIGxvZ29cbi8vICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqXG5jb25zdCBzaHJpbmtOYXYgPSAoKSA9PiB7XG4gICAgJChNQUlOX05BVikuYWRkKEJBTk5FUilcbiAgICAgICAgICAgICAgIC5hZGQoJ2hlYWRlcicpXG4gICAgICAgICAgICAgICAuYWRkKExPR09fV1JBUClcbiAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2hyaW5rJyk7XG59XG4vLyAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuLy8gRnVsbHkgZXhwYW5kcyBiYW5uZXIsIG5hdiwgJiBsb2dvXG4vLyAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuY29uc3QgZXhwYW5kTmF2ID0gKCkgPT4ge1xuICAgICQoTUFJTl9OQVYpLmFkZChCQU5ORVIpXG4gICAgICAgICAgICAgICAuYWRkKCdoZWFkZXInKVxuICAgICAgICAgICAgICAgLmFkZChMT0dPX1dSQVApXG4gICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NocmluaycpO1xufVxuXG4vLyAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuLy8gSGlkZXMvU2hvd3MgaGVhZGVyIHBzdWVkby1lbCAtLSBwcmV2ZW50cyBiZyBpbWFnZSBmcm9tXG4vLyBzaG93aW5nIGJlbG93IGZvb3RlciBvbiBvdmVyc2Nyb2xsc1xuLy8gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbmZ1bmN0aW9uIHRvZ2dsZUhlYWRlckJnSW1nKCkge1xuICAgIGxldCB3aW5Ub1RvcCA9ICQod2luZG93KS5zY3JvbGxUb3AoKSxcbiAgICAgICAgaGVhZGVySHQgPSAkKCdoZWFkZXInKS5oZWlnaHQoKTtcbiAgICBpZih3aW5Ub1RvcCA+IGhlYWRlckh0ICogMikge1xuICAgICAgICAkKCdoZWFkZXInKS5hZGRDbGFzcygncmVtb3ZlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgJCgnaGVhZGVyJykucmVtb3ZlQ2xhc3MoJ3JlbW92ZScpO1xuICAgIH1cbn1cblxuXG4vLyAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuLy8gc2V0cyBiYWNrZ3JvdW5kIGltYWdlIGhlaWdodCBvbiBwYWdlIGxvYWQgdG8gYXZvaWRcbi8vIGltYWdlIGp1bXAgd2hlbiBuYXYgYmFyIHNob3dzL2hpZGVzIG9uIG1vYmlsZVxuLy8gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbmNvbnN0IHNldEJnSW1nSGVpZ2h0ID0gKCkgPT4ge1xuICAgIC8vIHRyaWdnZXIgb24gMSkgZmlyc3QgdG91Y2hcbiAgICAvLyAgICAgICAgICAgIDIpIG9uIHdpbmRvdyByZXNpemUgd2hlbiBzdGF0ZS5oYXNUb3VjaCA9PT0gdHJ1ZVxuICAgIGxldCAkYmcgPSAkKCdoZWFkZXInKTtcbiAgICAkYmcuY3NzKCdtYXgtaGVpZ2h0JywgJycpOyAvLyBjbGVhciBtYXgtaGVpZ2h0IHRvIGhhbmRsZSByZXNpemUgYW5kIGdldCBkZWZhdWx0IGhlaWdodFxuICAgIGxldCBoID0gJGJnLmhlaWdodCgpO1xuICAgICRiZy5jc3MoJ21heC1oZWlnaHQnLCBoKTtcbn1cblxuLy8gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbi8vIEZhZGVzIG91dCBsb2FkaW5nIHNjcmVlbiBhbmQgcmVtb3ZlcyBpdCBmcm9tIERPTVxuLy8gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbmZ1bmN0aW9uIGZhZGVPdXRMb2FkU2NyZWVuKCkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAkKCcubG9hZGluZy1wYWdlLCAubG9hZGluZy1wYWdlIHN2ZycpLmFkZENsYXNzKCdmYWRlLW91dCcpO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICQoJ2JvZHknKS5yZW1vdmVDbGFzcygnbm8tc2Nyb2xsJyk7XG4gICAgICAgIH0sIDcwMCk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgJCgnLmxvYWRpbmctcGFnZScpLnJlbW92ZSgpO1xuICAgICAgICB9LCAyMDAwKTtcbiAgICB9LCA1MDApO1xufVxuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIHNocmlua05hdiwgXG4gICAgZXhwYW5kTmF2LFxuICAgIGZpeEJhbm5lcixcbiAgICB0b2dnbGVIZWFkZXJCZ0ltZyxcbiAgICBzZXRCZ0ltZ0hlaWdodCxcbiAgICBmYWRlT3V0TG9hZFNjcmVlblxufTsiXX0=
